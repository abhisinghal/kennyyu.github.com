<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: teaching | kennary island]]></title>
  <link href="http://kennyyu.me/blog/categories/teaching/atom.xml" rel="self"/>
  <link href="http://kennyyu.me/"/>
  <updated>2014-04-29T16:55:40-04:00</updated>
  <id>http://kennyyu.me/</id>
  <author>
    <name><![CDATA[Kenny Yu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflecting on 3 Years of Teaching]]></title>
    <link href="http://kennyyu.me/blog/2014/04/29/reflecting-on-3-years-of-teaching/"/>
    <updated>2014-04-29T16:30:00-04:00</updated>
    <id>http://kennyyu.me/blog/2014/04/29/reflecting-on-3-years-of-teaching</id>
    <content type="html"><![CDATA[<p>I taught my last section as an undergraduate today.
I've been a teaching fellow for a computer science class
every semester for the past three years, teaching:</p>

<ul>
<li>CS50 (Intro to Computer Science), Fall 2011</li>
<li>CS51 (Abstraction and Design), Spring 2012 and Spring 2013</li>
<li>CS61 (Systems Programming and Machine Organization), Fall 2012 and Fall 2013</li>
<li>CS161 (Operating Systems), Spring 2014</li>
</ul>


<p>At Harvard, a "Teaching Fellow" is the equivalent of
teaching assistants at most other universities.
Technically, I'm a "Course Assistant" as the title
"Teaching Fellow" is reserved for graduate students, but in
many of the classes that I've taught, the undergraduates have
the same (if not more) responsibilities than the graduate
students. These typically include teaching section, holding
office hours, and grading.</p>

<p>Over the past three years, I've attempted to have an impact in
all of the classes I've taught, and hopefully that impact will
last after I graduate. Also, I've learned several lessons about teaching
computer science classes, and I have advice for current
or future undergraduates considering teaching.</p>

<!-- more -->


<h2>Contributions</h2>

<p>Below is a list of some of the ways I've contributed to the courses
that I've taught:</p>

<ul>
<li><p><strong><a href="https://github.com/kennyyu/cs50section">CS50 Section Notes</a></strong> -
Before CS50 standardized the section notes
for each section, many of the teaching fellows often prepared
their own material for section (based on a set of example material
from previous years). I took this as an opportunity to create
material that I wish there were more of when I took the class:
more interactive coding labs, and fun technical interview-esque
problems for students with the extra time and interest. The end
result of this include coding labs teaching students file IO
(reading/writing pokemon structs from/to disk), implementing
essential data structures, building a pokedex (end-to-end web
application with a mysql backend), autocompletion (how to
perform asynchronous http requests), and many brainteaser
coding questions.</p></li>
<li><p><strong>CS51 Moogle: 2-3 Trees</strong> - CS51 is one of the few courses at Harvard
that uses OCaml as the core programming language for the course. The
class is famous for it's moogle problem set: at the end of the assignment,
students will have a working web crawler that can index a graph of web pages
and then rank them with different ranking algorithms (e.g., PageRank).
The goal of this assignment is to teach students abstraction and modularization
while implementing sets, maps, and rankers in different ways. In my first
time teaching the class, I was tasked to write a new portion of the assignment:
have students implement balanced trees with 2-3 trees. Implementing the 2-3 trees
was definitely a non-trivial task, but what made it more difficult was structuring
the code so that (1) it would be instructive for students who would need to understand
and modify the code to implement the 2-3 trees, and (2) the code would allow
for proper unit testing when the course staff later grades the student submissions.
Two years later, the course is still using my code in that assignment!</p></li>
<li><p><strong>CS51 Object Oriented Programming Notes</strong> - When I took CS51, the course was still taught
in both OCaml and Java. In my first year teaching the class, the professor
decided to axe the Java portion of the class because it was too difficult to
introduce object oriented programming concepts while having the students pick up
and entirely new programming language in only a few weeks. As a result,
the course staff decided to teach OO using the OO side of ocaml. I was tasked
with writing the section notes for this material. It was a learning experience to
figure out how to introduce so many new terms
(objects, classes, subclassing, inheritance, interfaces,
methods, overriding, polymorphism, subtyping, ...) in one section and not overwhelm
the students. Two years later, the course is still using these section notes!</p></li>
<li><p><strong>CS61</strong> - When I taught CS61 for the first time, it was also
Eddie Kohler's first time as the instructor for the course. He taught the course
differently from previous years and emphasized different concepts and as a result,
the course required a whole new set of section notes. Furthermore, the
course had a much smaller staff than the previous classes I had taught. As a result,
I ended contributing to and writing many of the
<a href="http://cs61.seas.harvard.edu/wiki/2012/Section">section notes</a> for that year. I took
that as an opportunity to present the course material in a different light
from the way material was presented in lecture, hopefully providing confused students a
clearer picture of course concepts. In my second time teaching the class, I was one of
the few returning course staff from the previous year, and I felt honored
that Eddie valued my opinion
on what I thought were the good and bad parts from the previous year.</p></li>
<li><p><strong><a href="http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161/">CS161 Synchronization Problems</a></strong> - At the beginning of this semester, I was tasked
with writing the sychronization problems for the synchronization problem set. I
tried to phrase the problem in an amusing and instructive way, and hopefully
these problems will be used again in future offerings of the class.</p></li>
</ul>


<p>In summary, an undergraduate teaching fellow can have a <strong>huge and lasting impact</strong>
on a course, including coming up with new assignments, writing new section notes, or
directing the overall direction of a course.</p>

<h2>Lessons Learned</h2>

<p>After teaching in so many different classes and so many different
students over the past three years, I've learned a few lessons:</p>

<ul>
<li><p><strong>Students can achieve more than they think they can.</strong> I remember before teaching my very
first section for CS50, I was told that my section was a "More Comfortable" section. In CS50,
students are placed into sections based on how they self-identify themselves into the buckets
"Less Comfortable", "More Comfortable", and "Somwhere In Between." As a result, I spent that
week preparing material I thought would be appropriate for more advanced students (material
including code labs and fun brain teaser technical interview questions). When I stepped
into the very first section and double checked with students that this was a more comfortable
section, they all gave me grim stares of horror and told me that the section was actually
"Somewhere in Between." It turns out that the head TFs for the class had accidentally
informed incorrectly about my section. However, I still taught the section as if it were
more comfortable: I still prepared for the code labs and brain teaser coding questions,
and I tried to be as clear and instructive as I could in my slides and explanations
of course concepts. At the end of the semester, many of the students did very well
in the class and thought section was taught at an appropriate, if not slow, pace.
As a result, I learned that students can undervalue their abilities: the
students regarded themselves as "somewhere in between" when they achieved just as well
as the "more comfortable" students.</p></li>
<li><p><strong>Make section relevent and useful for the students who attend.</strong>
In all of the courses that I've
taught, section was always optional but highly encouraged. I've been in many classes
were I had required section that I thought was pointless, or I've attended optional sections
only to find them unhelpful, discouraging me from attending future sections. As a result,
I highly value the students' opinion when I do have the privilege of them
attending my section, I want to make all of my sections helpful and useful for
the students that choose to attend. To do this, for CS50,
CS51, and CS61, I would always email a short anonymous feedback survey to students in
my section
to see what they thought was good and bad, and what they wanted to cover the following
week. I took this feedback to heart when planning material for sectiones, and as a result,
my sections always had a consistently near 100% (and for CS61 my first time, > 100%)
attendance, when many other sectiones taught by other course staff had lower a lower
attendance rate.</p></li>
<li><p><strong>Effective teaching requires planning, planning, planning.</strong> Before every section,
I would always plan out the agenda for the section, making sure every concept transitioned
smoothly to the next, and I had clear explanations and guiding questions to motivate
the material. Often, planning took longer than the actual length of time of section.
I learned very quickly that I was better and more comfortable teaching
using the white board/chalk board than using a slideshow. Using the board allowed
for more interactivity with students, and it made it easier to draw diagrams. Also,
writing things down on the board give time for students to pause and think, whereas
it is often difficult for students to read the text on slides while at the same time
having to listen to what the instructor has to say. As a result, I filled notebooks
with notes on how I would present the material in section, carefully planning out
my boardwork, how to make the most effective use of the board, and planning
diagrams I would use to explain the concepts. From this experience,
I learned to appreciate and admire the planning teachers have to do in preparation for
classes, and I also learned that I greatly enjoy the lesson planning part
of teaching.</p></li>
<li><p><strong>The most valuable thing you can do for students at office hours is to teach
students how to discover the answers themselves.</strong> One of the things I've
learned in my four years as an undergraduate is how to go about searching for
an answer to a question--often involving googling, experimenting at the command line,
and code reading. As I've moved on to higher level and more difficult courses,
the thing that I notice more about the more advanced students is their ability
to independently acknowledge what they don't know, and then take the initiative to
go about searching for the answer themselves. My experience with CS50 office hours
typically involved conversations of the form: "Student: Things don't work,
can you fix it? Me: what have you tried? Student: not much." and the student
would then sit with me until the problem was resolved. At office hours for CS161,
the conversations are typically of the form: "Student: Things don't work,
do you have any ideas why? Me: what have you tried? Student: gdb, grep, find,
binary searching the problem..." As a result, I realize that what makes students
more "advanced" is their ability to self-diagnose their own problems and take
the initiative to resolve them. Thus, my philosophy for office hours is to emphasize
teaching students the tools to go about solving a problem instead of telling
them the answer directly. One of my students
remarked on this philosophy in a comment in the Q guide,
stating "Kenny has tough love at office hours."</p></li>
<li><p><strong>Grading is very difficult.</strong> For me, grading is typically the most difficult
and time consuming part of being a TF. Automated testing for correctness is
not enough, as students typically (and rightfully) want in-depth feedback on how
they can improve. As a result, much of my experience grading as a TF has been
learning how to give appropriate and useful feedback, and I still have much to learn
in this area.</p></li>
<li><p><strong>Professors are people too.</strong> When you're taking a class and spending many
all-nighters on a problem set, it's easy to assume the professors are monsters
and forget
that professors are people too with their own lives, families, and goals.
After working with four different instructors on their course staff, I see
the course from the course staff point of view and I begin to understand
why professors structure the courses the way they do, and how much they do
in fact care about their courses and students, despite them not seeming to do
so when you're up coding late into the early morning.</p></li>
</ul>


<h2>Advice for Current and Future Undergraduates</h2>

<p>After all the lessons I've learned and work I've put into teaching, I highly
encourage other undergraduates to consider teaching as well for the following
reasons:</p>

<ul>
<li><p><strong>Teaching is a great opportunity to get to know professors.</strong> For large
lecture classes (typically the intro courses), it can be very difficult
to get an opportunity to talk one-on-one with professors and have them
know who you are. When you are on the course staff, the instructor personally
relies on you and the other course staff to run the course.
You get the rare opportunity to work with them and get to know them
on a more personal level.</p></li>
<li><p><strong>You don't really understand the material until you have to teach it to someone else.</strong>
Teaching is great opportunity to review and solidify your understanding of
the course material, and in my experience when I teach, I always learn something
that I didn't know when I first learned the material.</p></li>
<li><p><strong>You get to see how a course is run and control the direction of a course.</strong>
When you're on the course staff, you see and run everything: the infrastructure
for distributing and receiving student submissions, the scripts and tools
used for grading, the discussions for deciding what to cover in the next lecture, section
or assignment, and more. As a result, course staff can typically have a large
impact on a course, including coming up with new assignments, section material, or
guiding the direction of the course material.</p></li>
<li><p><strong>You become a mentor figure for underclassmen.</strong> I still remember the legendary
TFs I've had and how I admire them want to emulate them. When you teach,
you often become a mentor for students entering the concentration, and you can
have a large influence on the courses they choose and how they progress
through their time at Harvard within the concentration.</p></li>
</ul>


<p>Of course, there are downsides as well for being a teaching fellow:</p>

<ul>
<li><p><strong>Office hours is 24/7, even for classes you're not teaching.</strong> For large classes,
you often have many friends in the class. As a result, friends will direct
their questions to you in-person, through instant message, and through many other
means even when you're not having office hours. You'll also get questions for
classes that you're not teaching. It can be difficult to draw the boundary
between being a helpful friend and being a teaching fellow.</p></li>
<li><p><strong>It is time consuming.</strong> This semester, I've probably spent more time working on
CS161-related work than any of my actual courses. Office hours, teaching, preparing
for section, grading, attending lecture (for the hybrid classroom) can really add up.
In my opinion, it's like taking a fifth class.</p></li>
</ul>


<h2>Three Years Later</h2>

<p>After three years of teaching, 4 different classes,
3 <a href="http://bokcenter.harvard.edu/icb/icb.do?keyword=k1985&amp;pageid=icb.page29684">Certificates of Excellence in Teaching</a>, over 40 sections taught, and nearly 100 students I've
had the privilege of teaching, I've seen some of my own students become
teaching fellows for the same classes or other classes (I'm a grand-TF, haha),
and I like to think
I influenced their decision in some way. I've also had many underclassmen
in my section ask for computer science advice, and I've now seen them advanced
through multiple classes within the concentration.</p>

<p>I want to personally thank David, Greg, Eddie, and Margo for giving me the
opportunity to work with them and teach: teaching has definitely influenced
my undergraduate experiece in a significant and positive way, and college
would not have been the same without it.</p>

<p>Being a teaching fellow has been an important experience for me in
terms of self-discovery: I learned that I really like to teach and plan lessons,
and this makes me want to pursue some teaching-related work in my future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Synchronization Problems for OS161]]></title>
    <link href="http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161/"/>
    <updated>2014-03-20T01:25:00-04:00</updated>
    <id>http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161</id>
    <content type="html"><![CDATA[<p>This semester, I have the privilege of being a teaching fellow
for Harvard's legendary <a href="http://www.eecs.harvard.edu/~margo/cs161/">operating systems class</a>,
and I was tasked with writing the synchronization problems for
this year's synchprobs assignment! The goal of these problems
is to get students to think carefully about the synchronization
primitives and data structures needed to solve highly concurrent
problems, avoiding the usual problems that come with concurrency:
race conditions, deadlock, starvation, etc.</p>

<p>I remember how fun these problems
were last year (forming little fellowships of the ring and piazza posts,
meant to mimic creating barriers and reader-writer locks), and
I wanted to make sure the problems were just as fun this year.
I was tasked specifically to write problems to mimic the
synchronization one would use to implement <code>waitpid()</code>/<code>exit()</code>
(how would you do it?) and the synchronization needed
between address spaces and the coremap when implementing
a virtual memory system in the third assignment. Given
these specifications, I came up with
<strong>Singing Cows</strong> and <strong><del>Hunger</del> Deletion Games</strong> synchprobs!</p>

<!-- more -->


<p>To keep up with the playful spirit of the problems, I
disguised the waitpid/exit problem as a <strong>Singing Cows Problem</strong>:
a daddy cow must wait until each baby cow finishes
singing "Call Me Maybe" before the daddy cow can congratulate
the baby! The final version of the problem eventually
mimicked <code>wait()</code> instead, essentially making the daddy
cow wait until <strong>any</strong> baby cow finishes singing.</p>

<p>I had just watched <em>Hunger Games: Catching Fire</em>, and this
was my inspiration for the second problem: <strong><del>Hunger</del> Deletion Games</strong>.
In this problem, Katniss and Peeta each have multiple threads
and are attempting to sever mappings between the districts
and the capitol (for the sake of the problem, assume there
are <code>NSLOTS</code> districts). These mappings are represented
by a bijection between
capitol slots and district slots. The catch in this problem,
however, is that Katniss and Peeta are concurrently deleting
from opposite sides (Katniss from the capitol side and Peeta
from the district side), so students must avoid
both race conditions (concurrent deletions of the same slot)
and deadlock (concurrent deletions of the same mapping
from opposite sides). This situation mimics the coremap-address
space situation in which threads handling a page fault
need to access a page table entry and then
a coremap entry, while a cleaner thread simultaenously needs
to access a coremap entry and then the corresponding page
table entry. I remember it took me several weeks last year to fully
understand the synchronization needed for this coremap-address space
situation, and I was curious to see what kinds of solutions
students came up with. How would <strong>you</strong> solve this problem?</p>

<p>To see the source code for the problems and scripts to
check the solutions, see the <a href="https://github.com/kennyyu/cs161-a1scripts">github repo</a>.</p>

<p>The problem statements are shown below. Correct implementations should
avoid big lock solutions, and should not allow race conditions,
deadlocks, and starvation.</p>

<h2>Singing Cows</h2>

<p>A cow has many children. Each baby cow puts on a performance by singing
lyrics to "Call Me Maybe." Like a good parent, the daddy cow must
sit through each one of its baby cow's performances until the end, in order
to say "Congratulations Baby N!" where N corresponds to the N-th baby cow.</p>

<p>At any given moment, there is a single parent cow and possibly multiple
baby cows singing. The parent cow is not allowed to congratulate a baby
cow until that baby cow has finished singing. Your solution CANNOT
wait for ALL the cows to finish before starting to congratulate the babies.</p>

<p>Here is an example of correct looking output:</p>

<p><code>
...
Baby   1 Cow: Hot night, wind was blowin'
Baby   2 Cow: Ripped jeans, skin was showin'
Baby   4 Cow: Don't ask me, I'll never tell
Baby   5 Cow: And this is crazy
Baby   8 Cow: Hot night, wind was blowin'
Parent   Cow: Congratulations Baby 7!
Baby   1 Cow: And now you're in my way
Baby   2 Cow: And now you're in my way
Baby   4 Cow: Hey, I just met you
Baby   5 Cow: Pennies and dimes for a kiss
Baby   8 Cow: But now you're in my way
Parent   Cow: Congratulations Baby 1!
Baby   2 Cow: Ripped jeans, skin was showin'
Baby   4 Cow: I'd trade my soul for a wish
Baby   8 Cow: Hey, I just met you
Parent   Cow: Congratulations Baby 5!
Baby   2 Cow: Your stare was holdin'
Baby   4 Cow: But now you're in my way
Baby   8 Cow: Don't ask me, I'll never tell
Baby   2 Cow: Your stare was holdin'
Baby   4 Cow: Hot night, wind was blowin'
Baby   8 Cow: But now you're in my way
Baby   2 Cow: Your stare was holdin'
Baby   4 Cow: I'd trade my soul for a wish
Baby   8 Cow: But here's my number
Baby   2 Cow: Ripped jeans, skin was showin'
Baby   4 Cow: But now you're in my way
Baby   8 Cow: But now you're in my way
Parent   Cow: Congratulations Baby 2!
Baby   4 Cow: Your stare was holdin'
Baby   8 Cow: Hey, I just met you
Baby   4 Cow: And this is crazy
Baby   8 Cow: I wasn't looking for this
</code></p>

<h2><del>Hunger</del> Deletion Games</h2>

<p>Katniss and Peeta are tired of Hunger Games and want to play a new kind
of game instead, the Deletion Games! They want to sever all ties between
the Capitol and all of its districts (for the sake of this problem, assume
that there are actually <code>NSLOTS</code> districts). Katniss is severing ties
from the Capitol side, and Peeta is severing ties from the Districts' side.</p>

<p>There is a 1:1 correspondence between <code>capitol_slots</code> and <code>district_slots</code>. This
means that each slot in <code>capitol_slots</code> has exactly one corresponding entry in
<code>district_slots</code>, and each slot in <code>district_slots</code> has exactly one corresponding
entry in <code>capitol_slots</code>. More formally:</p>

<p>```
For all i in {0, 1, 2, ..., NSLOTS - 1},
if capitol_slot[i].is_mapped == true, then
district_slot[capitol_slot[i].district_index].is_mapped == true AND
district_slot[capitol_slot[i].district_index].capitol_index == i</p>

<p>AND similarly if district_slot[i].is_mapped == true.
```</p>

<p>Katniss and Peeta each will use <code>NTHREADS</code> to delete these mappings. Katniss
will delete mappings based on randomly generated capitol indices, and Peeta
will delete mappings based on randomly generated district indices.</p>

<p>For example, suppose Katniss randomly chooses capitol index 4 to delete.
She looks at capital slot 4, sees that the slot is still mapped, and finds
the corresponding district index is 12. Then Katniss will free the mappings
in capitol slot 4 and district slot 12.</p>

<p>Suppose Peeta, on the other hand, randomly chooses district index 12 to
delete. He looks at district slot 12, sees that the slot is still mapped,
and finds the corresponding capitol index is 4. Then Peeta will free the
mappings in district slot 12 and capitol slot 4.</p>

<p>However, without proper synchronization, we may get:</p>

<ul>
<li>race conditions: if multiple threads attempt to delete the same mappings at the same time</li>
<li>deadlock: Katniss and Peeta try to delete the (capitol 4, district 12)
mappings at the same time starting from opposite sides</li>
<li>starvation: all the mappings must eventually be deleted</li>
</ul>


<p>Your solution must satisfy these conditions:</p>

<ul>
<li>Avoid race conditions.</li>
<li>Avoid any unsynchronized reads (reads on a shared variable without holding the mutex for that variable).</li>
<li>No threads may exit until all the mappings have been deleted.</li>
<li>Guarantee no deadlock can occur. Your invariants and comments should
provide a convincing proof of this.
HINT: You should insert well-placed <code>thread_yield()</code> calls in your code to
convince yourself of no deadlock.</li>
<li>When Katniss and Peeta generate random indices to delete, you may decide
to IGNORE that index if you wish and move onto the next index. However,
all mappings must eventually be deleted.
HINT: Use this to your advantage to introduce some asymmetry to the
problem.</li>
</ul>


<p>Here is an example of correct looking output:</p>

<p><code>
...
{who: katniss, capitol: 86, district: 16, deleted: 114}
{who: katniss, capitol: 108, district: 97, deleted: 115}
{who: peeta, capitol: 89, district: 13, deleted: 116}
{who: katniss, capitol: 103, district: 49, deleted: 117}
{who: katniss, capitol: 5, district: 91, deleted: 118}
{who: peeta, capitol: 57, district: 44, deleted: 119}
{who: katniss, capitol: 39, district: 81, deleted: 120}
{who: katniss, capitol: 55, district: 96, deleted: 121}
{who: peeta, capitol: 101, district: 64, deleted: 122}
{who: katniss, capitol: 44, district: 58, deleted: 123}
{who: katniss, capitol: 59, district: 78, deleted: 124}
{who: katniss, capitol: 80, district: 85, deleted: 125}
{who: katniss, capitol: 122, district: 88, deleted: 126}
{who: katniss, capitol: 67, district: 114, deleted: 127}
{who: katniss, capitol: 61, district: 17, deleted: 128}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Through Bootcamps]]></title>
    <link href="http://kennyyu.me/blog/2013/11/18/bootcamps/"/>
    <updated>2013-11-18T11:25:00-05:00</updated>
    <id>http://kennyyu.me/blog/2013/11/18/bootcamps</id>
    <content type="html"><![CDATA[<p>This semester, I've been writing and leading <a href="https://github.com/hcs/bootcamp-main/">bootcamps</a> as the
<a href="http://www.hcs.harvard.edu/">Harvard Computer Society</a> Bootcamp Manager. In the past, HCS has
had bootcamps on various topics including python, javascript, and git. Bootcamps are typically
targetted for students just starting computer science (fresh{wo}men, sophomores).</p>

<p>My goal this smester was to restart the bootcamps and to revamp the curriculum. In this post, I'll talk about:</p>

<ol>
<li>The <strong>bootcamp curriculum</strong> I designed</li>
<li>The typical <strong>workflow</strong> for a bootcamp</li>
<li>The <strong>design decisions</strong> that went into writing these bootcamps</li>
<li>Some high level <strong>results</strong> (pull request numbers and summary of testimonials)</li>
<li><strong>Unedited testimonials</strong> from students in the bootcamps</li>
</ol>


<!-- more -->


<h2>Bootcamp Curriculum</h2>

<ol>
<li><p><a href="https://github.com/hcs/bootcamp-setup/wiki">Bootcamp Setup</a> and <a href="http://goo.gl/jk45W1">slides</a>.
From my experience leading bootcamps
last semester, I realized it is really hard to cater to so many different programming
backgrounds and machine setups. As a result, I chose to standardize and require students
to install a UNIX system with a package manager:</p>

<ul>
<li>OSX with <a href="http://brew.sh/">homebrew</a></li>
<li><a href="https://manual.cs50.net/appliance/">CS50 Appliance</a>, since most students are either taking
or have taken <a href="https://cs50.harvard.edu/">CS50</a>, Harvard's Intro to Computer Science course.</li>
<li>Ubuntu virtual machine with VirtualBox or VMWare</li>
</ul>
</li>
<li><p><a href="https://github.com/hcs/bootcamp-unix/wiki">Intro to UNIX Part 1: Command Line</a> and <a href="http://goo.gl/5NJyWw">slides</a>.
This bootcamp presents the UNIX command line and the stdin, stdout, stderr, and pipe abstractions.
<a href="https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Scavenger-hunt">Exercises</a>
include scavenger hunts through a code base using <code>find</code>, <code>grep</code>, and piping
a sequence of commands together transform and analyze files.</p></li>
<li><p><a href="https://github.com/hcs/bootcamp-unix/wiki/Shell-scripts">Intro to UNIX Part 2: Shell Scripting</a> and <a href="http://goo.gl/kRpD4y">slides</a>.
This continues the introduction to UNIX with shell scripts. Exercises include:</p>

<ul>
<li>Writing a <a href="https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Shell-scripts">web scraper to scrape images from Amazon</a>
using only basic UNIX commands, and writing</li>
<li>A <a href="https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Mail-Merge-Shell-Script">mail merge script</a>.</li>
</ul>
</li>
<li><p><a href="https://github.com/hcs/bootcamp-git/wiki">Git and Github</a> and <a href="http://goo.gl/siE4CQ">slides</a>.
This bootcamp introduces students to version control and using git with Github. Exercises include</p>

<ul>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Scavenger-Hunt">Scavenger Hunt</a>
through a repository's history (e.g. which commit introduced a change, who did it, checking out an old revision)</li>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Committing-and-Pushing">Committing and Pushing</a>. Have students
attempt to replicate a git history tree.</li>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Resolving-Merge-Conflicts">Resolving Merge Conflicts</a>.
I made a branch that would purposely cause a merge conflict when students attempt to merge the branch
into their master branch.</li>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Reverting-a-commit">Reverting a Commit</a>.</li>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Making-a-Pull-Request">Making a Pull Request</a>. Students
create a pull request on github. This exercise allows students to make pull requests in the future
and to give me and the HCS board the opportunity to give them feedback on their work.</li>
</ul>
</li>
<li><p><a href="https://github.com/hcs/bootcamp-python/wiki">Intro to Python</a> and <a href="http://goo.gl/9ID3ad">slides</a>.
This bootcamp introduces students to basic feature of Python, including control flow and data structures
(lists, sets, dictionaries, tuples, strings). Exercises include:</p>

<ul>
<li><a href="https://github.com/hcs/bootcamp-python/wiki/Exercise-Hello-World">Hello World!</a>.
This also sets up a pull request to keep track of their work.</li>
<li><a href="https://github.com/hcs/bootcamp-python/wiki/Exercise-Spell-Checker">Spell Checker</a>. Inspired by CS50's
<a href="http://cdn.cs50.net/2013/fall/psets/6/pset6/pset6.html">Spell Checker</a> problem set, I wanted to
show students how much Python abstracts many things away and makes programming in Python extremely
simple and easy.</li>
<li><a href="https://github.com/hcs/bootcamp-python/wiki/Exercise-Programming">Python Exercises</a>. This is an example
of test-driven development: we give students failing unit tests, and their job is to make
all the unit tests pass.</li>
</ul>
</li>
</ol>


<h2>Workflow</h2>

<p>I designed the workflow centered around github wiki pages and pull requests. Here's the workflow for a typical bootcamp:</p>

<ol>
<li>Start reading the github wiki page for the bootcamp repository.</li>
<li>Fork the bootcamp repository and clone it to their local machines.</li>
<li>Do some of the exercises.</li>
<li>Setup a pull request using the original bootcamp respository as the base of the pull request,
and their master branch as the head of the pull request</li>
<li>Do some more exercises and push commits to their master branch, which will update their pull request.</li>
<li>Wait for feedback on the pull request.</li>
</ol>


<h2>Design Goals</h2>

<p>I designed the curriculum and workflow with multiple goals in mind:</p>

<ul>
<li><p><strong>Flipped Classroom.</strong> From my experience in classes with
<a href="http://www.eecs.harvard.edu/~margo/cs161/">flipped classrooms</a>,
students learn (at least with programing exercises) much better when they have hands-on
exercises with guidance from the instructor. With this in mind, I wrote all the bootcamps
to minimize the amount of lecturing I give and to maximize the amount of time students
would be programming and asking questions.</p></li>
<li><p><strong>Useful Software Engineering Skills.</strong> With these bootcamps, I wanted to provide
others with the exercises and support that I wish I had had as a freshmen--exercises
to teach some basic skills that would be useful not only in industry, but also
useful in an academic setting. From my experiences in internships and classes,
some of the most useful skills that have learned are</p>

<ol>
<li>using the command line effectively</li>
<li>scripting repetitive tasks (e.g. test harnesses, moving/editing files)</li>
<li>using version control</li>
<li>having a go-to language for quick prototyping and tasks</li>
</ol>
</li>
<li><p><strong>Start from Zero.</strong> Because HCS's target audience is students with very
little programming experience, I wrote the bootcamps so that anyone starting
from zero programming experience could quickly get their environment setup
and start using the command line. Naturally, there will be students that
already have programming experience, and I supplemented the basic exercises
in bootcamps with more involved exercises that students can do on their
own pace.</p></li>
<li><p><strong>Feedback System.</strong> I believe it's very important to get feedback
on your work, especially when programming for the first time. Therefore, I
designed the bootcamps to use github's pull request feature for comments
and feedback. Pull requests allow us to leave in-line comments on code,
and to provide a comment-discussion feature for general feedback. I also
encouraged students to install the <a href="https://chrome.google.com/webstore/detail/gh-diff-highlight/gjljgldconccfbldbnnpbgahpckhjcfj">GH Diff Highlight Chrome Extension</a>
to colorize pull request diffs.</p>

<p><a href="https://github.com/hcs/bootcamp-python/pulls">Here</a> are examples of the
feedback we provided on the Intro to Python bootcamp.</p></li>
<li><p><strong>Reusable.</strong> I am a senior and will be graduating soon; as a result, I
want the bootcamps to be reusable after I leave. Because of this,
I made all the bootcamps open source github repositories
so that they may be reused, updated, and forked as necessary in the future.</p></li>
</ul>


<h2>Results</h2>

<p>Overall, attendance was generally higher than I expected. The attendance for
the setup and first two UNIX bootcamps were roughly 30-40 people, which
is one of the highest attendance rates HCS has had in a while for a bootcamp.
Naturally, as the semester progresses, students get more busy with midterms and assignments,
and so attendance dropped to about 20 for git, and a dozen or so for the Python
bootcamp. After each bootcamp, I posted a survey asking for feedback. I asked
the question:</p>

<blockquote><p>What did you think of the bootcamp? (What you liked, didn't like, what was useful, wasn't useful. What would you have done differently? etc.)</p></blockquote>

<p>The feedback was generally positive. The types of feedback were generally along one or
more of these categories (see the Testimonial section at the end for real responses):</p>

<ol>
<li>Hands-on flipped classroom sessions were helpful in helping students digest the material.</li>
<li>More advanced students wanted more challenging exercises.</li>
<li>Too fast/too slow.</li>
<li>Requests for review of material from previous sessions.</li>
</ol>


<p>In terms of numbers, the <a href="https://github.com/hcs/bootcamp-git/pulls">Git and Github Bootcamp</a> had 28 forks, with 16
students successfully submitting a pull request. The <a href="https://github.com/hcs/bootcamp-git/pulls">Python Bootcamp</a> had 16 forks,
with 10 students sucessfully submitting a pull request, and 4 students finishing all the python exercises.</p>

<p>From these numbers and testimonials, it seems that the flipped classroom model worked very well,
and the various levels of exercises and walkthroughs catered to both advanced and beginner students.</p>

<h2>Testimonials</h2>

<p>Below are the unedited and anonymized testimonials from students:</p>

<h3>UNIX Part 1: Command Line</h3>

<blockquote><p>This seems well done, albeit rather basic. Maybe mentioning "do one thing well" to explain why UNIX works the way it does.</p>

<p>I thought it was good since it taught me all the basics in one sitting</p>

<p>Like it.</p>

<p>I think this was great although taught a little quickly</p>

<p>Useful, but went a little slowly; Overall was run very well, learned some useful UNIX commands.</p>

<p>Very useful! I learned a lot about some of the basic commands available to us. I wish we'd dived into the scavenger hunt sooner so we could've had more time for it and the shell script exercise.</p>

<p>I liked how many functions could be linked to each other. That was really cool. Also how there are functions that allow tons of flexibility with the -char ability.</p>

<p>Very helpful especially one-on-one. Went through the slides a bit too fast</p>

<p>Awesome! While I've done a good amount of programming before, I haven't had a chance to learn many of the covered UNIX commands... until now.</p>

<p>Thanks for an awesome class, Kenny!"</p>

<p>smaller room preferably</p>

<p>Scavenger hunt was fun. I'm glad I sat next to people who were more familiar with this material.</p>

<p>Ir was really useful.  I got a better sense of how to use the command line than ever before!  Thanks.</p>

<p>It got a little hectic at the end...</p>

<p>I thought it went a little too fast for me. But I enjoy the premises of the program. I just wish it was not so much like a class, but a collaboration so that everyone feels involved.</p>

<p>I thought it was a really good topic, but it moved to quickly for me. It also would have been nice if there were more people to answer questions, because that was really helpful. Along with piazza, it would be nice to have a small recap session to go over the topics and solidify them.</p>

<p>This was a good set of exercises.  I got distracted with unrelated things (c/p, sending the answers directly to answers.txt), so I lagged behind.</p>

<p>I liked it! I thought I knew shell scripting before, but now I feel more comfortable with channeling and piping and whatnot. :)</p>

<p>It was very informative!</p>

<p>I've learned a lot. It was very informative.</p>

<p>Great tutorial. Learned a lot about UNIX, especially piping.</p></blockquote>

<h3>UNIX Part 2: Shell Scripting</h3>

<blockquote><p>could have been a little more organized.  But people were very helpful.</p>

<p>Useful bootcamp, I didn't know how to write shell scripts...</p>

<p>I liked having the recap of last week and generally enjoyed this exercise.  I like the presence of a second exercise for those who finish early.</p>

<p>Could've used more instruction on the scraper parts - using man over and over again got annoying</p></blockquote>

<h3>Git and Github</h3>

<blockquote><p>Awesome overview of git. I knew a bit coming in, but setting up the alias for my "lg" command was great, so that I can see my requests in a more aesthetically pleasing fashion. Maybe a bit more on creating branches to make temporary changes and then merging your own branch back.</p>

<p>github is harder than i expected–it's like a whole new world of stuff! so it was largely a struggle but i think i learned a lot</p>

<p>Liked how straightforward it was. I would maybe have thrown in a challenge exercise</p>

<p>It was very fun and easy to understand. Plus, I learned a whole bunch of stuff I never knew before (and a lot of things unrelated to git, but useful as a whole, like how to use vim). :)</p>

<p>It was fantastic! I don't think I would have done anything differently.</p>

<p>Useful, already knew a decent amount about git. The pace was good, wouldn't have changed anything.</p>

<p>It is difficult but manageable</p>

<p>Exercises are nice.</p>

<p>It was great! And useful!</p>

<p>I thought the bootcamp was useful. Github is a lot more manageable and less confusing after today's bootcamp. I'm glad I came.</p>

<p>This one was really good and understandable!</p>

<p>I wasn't able to come to the bootcamp on Wednesday, but I just completed it on my own - the slides and online directions were really helpful, and I could pretty much figure most things out on my own.</p>

<p>On a side note, I also completed the mail merger exercise from last week's bootcamp, and the solution didn't follow the instructions that we were given, so that confused me a little.</p></blockquote>

<h3>Intro to Python</h3>

<blockquote><p>Pretty cool.  Exercises were nice, good practice.  I was already pretty familiar with Python, though, so not representative.</p>

<p>It was useful, especially the talk about CS classes and coursework!</p>

<p>This was a great lesson. The only problems I had were setting up git stuff, but that is mostly due to the fact that this was the first time I came up. There is not much to change other than perhaps moving a bit slower.</p>

<p>It was great! Learnt a lot about python. Especially liked the exercises that helped me get a little more used to python syntax.</p>

<p>I love to code and I love the exercises, as well as the debugger tests that let me see what I was doing wrong and which lines. Python is so applicable. To improve, I think we could get thai(Spice?) for the food next time to add variety.</p>

<p>I liked that it had fewer directed parts and relied more on us learning some of python's capabilities on our own</p></blockquote>
]]></content>
  </entry>
  
</feed>
