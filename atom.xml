<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kennary island]]></title>
  <link href="http://kennyyu.me/atom.xml" rel="self"/>
  <link href="http://kennyyu.me/"/>
  <updated>2014-06-12T16:40:03-04:00</updated>
  <id>http://kennyyu.me/</id>
  <author>
    <name><![CDATA[Kenny Yu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[197,717 Lines of Code Later...]]></title>
    <link href="http://kennyyu.me/blog/2014/06/12/197717-lines-of-code-later-dot-dot-dot/"/>
    <updated>2014-06-12T15:16:00-04:00</updated>
    <id>http://kennyyu.me/blog/2014/06/12/197717-lines-of-code-later-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>After taking 18 computer science classes at Harvard (17 in CS, 1 in EE),
I was curious to see exactly how many lines of code I have written
for assignments these past four years. I was also curious what the breakdown
would be for the different programming languages I&#8217;ve learned over the years.</p>

<p>After looking through the archives of my computer, I calculated that I wrote
<strong>197,717</strong> lines of code (141,008 insertions, 56,709 deletions) for my
classes in the past four years! In fact, I believe this is actually
an underestimate. In this post, I&#8217;ll talk about how
I calculated this number, and assumptions I made when calculating this
number.</p>

<p><img src="http://kennyyu.me/images/count-course.png" alt="Lines of Code by Course" /></p>

<p><img src="http://kennyyu.me/images/count-filetype.png" alt="Lines of Code by File Type" /></p>

<p><img src="http://kennyyu.me/images/count-semester.png" alt="Lines of Code by Semester" /></p>

<!-- more -->


<h2>Examining my git log</h2>

<p>Fortunately, except for freshman year, I used git for all my projects
and assignments. As a result, I can compute the number of lines of code I wrote
by examining by git log history. Using git made calculating my contributions on
group projects especially easy as git keeps track of who authored each commit.
Furthermore, by examining the insertions and deletions of each commit, as opposed to
examining the line count at the HEAD of the branch, I can see a more accurate number
of lines I wrote and deleted, as opposed to the final count at the end of the
assignment/project.</p>

<p>For each git repository, I did the following:</p>

<ol>
<li><p>Determine which commits were authored by me, using the following command:
<code>git log --author=Kenny --oneline</code>.</p></li>
<li><p>For each of those commits, examine the insertion/deletion count for that
commit, broken down for each file: <code>git show COMMIT --oneline --numstat</code></p></li>
<li><p>Aggregate those stats by file name across all the commits in a repository,
then aggregate those stats by file type.</p></li>
<li><p>Do this across all the git repositories for all the courses I took.</p></li>
</ol>


<p>If you want to examine your own stats across a repository, you can check
out my <a href="https://gist.github.com/kennyyu/5e59519b3972823e20bf">python counting script</a>.
Here&#8217;s a snippet of the relevent code performing the steps above.</p>

<figure class='code'><figcaption><span>examining git commits</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">command</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Runs the shell command and returns the stdout as a list</span>
</span><span class='line'><span class="sd">    of strings.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">s</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">stderr</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">devnull</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">),</span>
</span><span class='line'>                            <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># strip trailing newline characters</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">commits_by_author</span><span class="p">(</span><span class="n">author</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Returns the list of commit hashes by the given author</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="n">command</span><span class="p">(</span><span class="s">&quot;git log --author=</span><span class="se">\&quot;</span><span class="si">%s</span><span class="se">\&quot;</span><span class="s"> --oneline&quot;</span> <span class="o">%</span> <span class="n">author</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">commit_stats</span><span class="p">(</span><span class="n">commit</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Returns a mapping of filename -&gt; (additions, deletions)</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="n">command</span><span class="p">(</span><span class="s">&quot;git show </span><span class="si">%s</span><span class="s"> --oneline --numstat&quot;</span> <span class="o">%</span> <span class="n">commit</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># the first line is just a repeat of the hash, so skip it</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># stats are of the form:</span>
</span><span class='line'>    <span class="c"># additions    deletions    filename</span>
</span><span class='line'>    <span class="n">stats</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>        <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="s">&quot;&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="n">addition</span><span class="p">,</span> <span class="n">deletion</span><span class="p">,</span> <span class="n">fname</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">addition</span> <span class="o">==</span> <span class="s">&quot;-&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">addition</span> <span class="o">=</span> <span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">deletion</span> <span class="o">==</span> <span class="s">&quot;-&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">deletion</span> <span class="o">=</span> <span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="n">addition</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">addition</span><span class="p">)</span>
</span><span class='line'>        <span class="n">deletion</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">deletion</span><span class="p">)</span>
</span><span class='line'>        <span class="n">stats</span><span class="p">[</span><span class="n">fname</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">addition</span><span class="p">,</span> <span class="n">deletion</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">stats</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Notes</h2>

<p>I followed these rules when calculating my total line count.</p>

<ul>
<li><p><strong>Ignore autogenerated, binary, or raw data files when calculating a line count.</strong>
When I performed the count on my various git repositories, I noticed that I
was not always very disciplined on what I was checking into the repository.
Often, courses would want us to submit files that were autogenerated, and so I
checked in autogenerated files, binaries, images, csvs, etc. into the repository.
Thus, I made an option in my scipt to ignore certain file extensions so
that I do not get an inflated line count. Furthermore, I took the notion of &#8220;code&#8221;
to mean anything that was not autogenerated, so I included file types like
 <code>.tex</code>, <code>.txt</code>, <code>.md</code> and <code>README</code> as code (as long as they were not autogenerated).</p></li>
<li><p><strong>Prefer underestimates over overestimates.</strong>
I did not know how to use git freshman year, and as a result, I cannot get an
accurate count for the number of lines of code for CS50, CS51, or CS179. As a result,
I only included code that I entirely wrote myself, which excludes modifying code
from distribution code from a problem set, and code I wrote as part of team projects.
For CS51, I had the original
tarball distribution for some of the assignments, so I was able to diff the distribution
code with my final assignment submittion. As a result of this exlcusion, the line count
for these three courses is much smaller than it actually is.</p></li>
<li><p><strong>Only include code written for assignments.</strong>
As a result, I did not count lines of code written for section or lines of code
I wrote when <a href="http://kennyyu.me/blog/2014/04/29/reflecting-on-3-years-of-teaching/">TFing these past 3 years</a>.</p></li>
</ul>


<h2>Classes I&#8217;ve Taken</h2>

<p>For reference, here&#8217;s the list of the computer science classes I&#8217;ve taken and when
I took them (and possible links to related blog posts).</p>

<ol>
<li><a href="https://github.com/kennyyu/cs50section">CS50 - Introduction to Computer Science</a> (Fall 2010)</li>
<li>CS51 - Abstraction and Design (Spring 2011)</li>
<li>CS179 - Design of Usable Interactive Systems (Spring 2011)</li>
<li>CS61 - Systems Programming and Machine Organization (Fall 2011)</li>
<li>CS153 - Compilers (Fall 2011)</li>
<li>CS124 - Algorithms and Data Structures (Spring 2012)</li>
<li>CS262 - Introduction to Distributed Computing (Spring 2012)</li>
<li><a href="http://kennyyu.me/blog/2012/05/18/binary-search/">CS207 - Systems Development for Computational Science</a> (Spring 2012)</li>
<li>CS121 - Introduction to Theory of Computer Science (Fall 2012)</li>
<li><a href="http://kennyyu.me/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy/">CS283 - Computer Vision</a> (Fall 2012)</li>
<li>CS181 - Artificial Intelligence (Spring 2013)</li>
<li><a href="http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161/">CS161 - Operating Systems</a> (Spring 2013)</li>
<li>CS261 - Research Topics in Operating Systems (Fall 2013)</li>
<li><a href="http://cs109.joeong.com/">CS109 - Data Science</a> (Fall 2013)</li>
<li><a href="http://kennyyu.me/blog/2013/11/18/bootcamps/">CS91r - Supervised Reading and Research with Jim Waldo</a> (Fall 2013)</li>
<li><a href="http://kennyyu.me/blog/2014/03/19/c-error-handling/">CS165 - Data Systems</a> (Spring 2014)</li>
<li>CS91r - Supervised Reading and Research  with Margo Seltzer (Spring 2014)</li>
<li><a href="http://kennyyu.me/blog/2014/06/04/tinibot-a-voice-activated-drink-mixer/">ES50 - Introduction to Electrical Engineering</a> (Spring 2014)</li>
</ol>


<h2>Results</h2>

<p>It&#8217;s not a surprise for me that I have written more C code than any other language in college,
but it surprised me that python was a close second. However, I realized that I
now use python as my goto language for prototyping and data analysis, and I&#8217;ve used
python in more classes than any other class (CS283, CS181, CS109, both CS91r&#8217;s, ES50, CS261)
compared to C (CS61, CS161, CS165). I was surprised the java count was so high,
as I have used java mainly in internships. I realized that this came from
CS124 (I used java for Mitzenmacher&#8217;s programming assignments) and for CS262
(you gotta use java if you&#8217;re in Jim Waldo&#8217;s class!). Furthermore, I was shocked
that the ocaml (<code>.ml</code>) line count was so low, as I felt like I wrote much more code
when taking CS153 (Compilers). However, I haven&#8217;t written ocaml code for a class since
compilers, and so this count makes sense.</p>

<p>I was a bit surprised at first on why the theoretical classes (CS124, CS121) had
such a high line count, and then I realized it was mostly due to <code>.tex</code> files.</p>

<p>CS161 is often considered the most difficult and time-consuming class at Harvard,
and so I thought that CS161 would probably have the highest line count. I was surprised
that CS181 and CS165 beat the CS161 count. I believe that because there was no
distribution code for CS165 (Data Systems), I had to write a lot more (but less interesting)
code to make all the glue for my database. For CS181, the course and assignments
were so disorganized the year I took it, and as a result, there were frequent large commits
that were mostly overhaul and rewriting everything.</p>

<p>When examining the line count by semester, my spring semesters have a much
higher line count than my fall semester, and my Spring 2013 semester has the
highest count (not a surprise! I was taking CS161 and CS181 at that time).</p>

<h2>Conclusion</h2>

<p>In the end, I calculated that I made 197,717 changes
(141,008 insertions, 56,709 deletions) over the past four years. This number is
probably an underestimate, but I assume it&#8217;s around the ballpark of the true number
of lines of code I&#8217;ve written in college. This makes me appreciate just how much
one can learn and do in four years!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tiniBot: A Voice-Activated Drink Mixer]]></title>
    <link href="http://kennyyu.me/blog/2014/06/04/tinibot-a-voice-activated-drink-mixer/"/>
    <updated>2014-06-04T19:34:00-04:00</updated>
    <id>http://kennyyu.me/blog/2014/06/04/tinibot-a-voice-activated-drink-mixer</id>
    <content type="html"><![CDATA[<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/xetTOXwaTmc "></iframe></div>


<p>This past semester, I took ES50, Harvard&#8217;s introductory course in electrical
engineering. For our final project, my group decided to make a voice-activated
drink mixer! I was in charge of the coding component of the project.</p>

<p><img src="http://kennyyu.me/images/tinibot-code.jpg" alt="Omnibox GDrive Search" /></p>

<p>The code is available on <a href="https://github.com/kennyyu/tinibot">github</a>.
To do the speech recognition, I
used the Chrome Speech API. Once I have the transcribed text, I send
the text to a local server, which figures out the drink that was ordered,
and then sends the appropriate times to open each of the bottles.
The server sends these times to the attached Arduino, which then
sends current to the appropriate solenoid valves for the designated times.
When activated, the solenoid valves allow liquid to flow through.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflecting on 3 Years of Teaching]]></title>
    <link href="http://kennyyu.me/blog/2014/04/29/reflecting-on-3-years-of-teaching/"/>
    <updated>2014-04-29T16:30:00-04:00</updated>
    <id>http://kennyyu.me/blog/2014/04/29/reflecting-on-3-years-of-teaching</id>
    <content type="html"><![CDATA[<p>I taught my last section as an undergraduate today.
I&#8217;ve been a teaching fellow for a computer science class
every semester for the past three years, teaching:</p>

<ul>
<li>CS50 (Intro to Computer Science), Fall 2011</li>
<li>CS51 (Abstraction and Design), Spring 2012 and Spring 2013</li>
<li>CS61 (Systems Programming and Machine Organization), Fall 2012 and Fall 2013</li>
<li>CS161 (Operating Systems), Spring 2014</li>
</ul>


<p>At Harvard, a &#8220;Teaching Fellow&#8221; is the equivalent of
teaching assistants at most other universities.
Technically, I&#8217;m a &#8220;Course Assistant&#8221; as the title
&#8220;Teaching Fellow&#8221; is reserved for graduate students, but in
many of the classes that I&#8217;ve taught, the undergraduates have
the same (if not more) responsibilities than the graduate
students. These typically include teaching section, holding
office hours, and grading.</p>

<p>Over the past three years, I&#8217;ve attempted to have an impact in
all of the classes I&#8217;ve taught, and hopefully that impact will
last after I graduate. Also, I&#8217;ve learned several lessons about teaching
computer science classes, and I have advice for current
or future undergraduates considering teaching.</p>

<!-- more -->


<h2>Contributions</h2>

<p>Below is a list of some of the ways I&#8217;ve contributed to the courses
that I&#8217;ve taught:</p>

<ul>
<li><p><strong><a href="https://github.com/kennyyu/cs50section">CS50 Section Notes</a></strong> -
Before CS50 standardized the section notes
for each section, many of the teaching fellows often prepared
their own material for section (based on a set of example material
from previous years). I took this as an opportunity to create
material that I wish there were more of when I took the class:
more interactive coding labs, and fun technical interview-esque
problems for students with the extra time and interest. The end
result of this include coding labs teaching students file IO
(reading/writing pokemon structs from/to disk), implementing
essential data structures, building a pokedex (end-to-end web
application with a mysql backend), autocompletion (how to
perform asynchronous http requests), and many brainteaser
coding questions.</p></li>
<li><p><strong>CS51 Moogle: 2-3 Trees</strong> - CS51 is one of the few courses at Harvard
that uses OCaml as the core programming language for the course. The
class is famous for it&#8217;s moogle problem set: at the end of the assignment,
students will have a working web crawler that can index a graph of web pages
and then rank them with different ranking algorithms (e.g., PageRank).
The goal of this assignment is to teach students abstraction and modularization
while implementing sets, maps, and rankers in different ways. In my first
time teaching the class, I was tasked to write a new portion of the assignment:
have students implement balanced trees with 2-3 trees. Implementing the 2-3 trees
was definitely a non-trivial task, but what made it more difficult was structuring
the code so that (1) it would be instructive for students who would need to understand
and modify the code to implement the 2-3 trees, and (2) the code would allow
for proper unit testing when the course staff later grades the student submissions.
Two years later, the course is still using my code in that assignment!</p></li>
<li><p><strong>CS51 Object Oriented Programming Notes</strong> - When I took CS51, the course was still taught
in both OCaml and Java. In my first year teaching the class, the professor
decided to axe the Java portion of the class because it was too difficult to
introduce object oriented programming concepts while having the students pick up
and entirely new programming language in only a few weeks. As a result,
the course staff decided to teach OO using the OO side of ocaml. I was tasked
with writing the section notes for this material. It was a learning experience to
figure out how to introduce so many new terms
(objects, classes, subclassing, inheritance, interfaces,
methods, overriding, polymorphism, subtyping, &#8230;) in one section and not overwhelm
the students. Two years later, the course is still using these section notes!</p></li>
<li><p><strong>CS61</strong> - When I taught CS61 for the first time, it was also
Eddie Kohler&#8217;s first time as the instructor for the course. He taught the course
differently from previous years and emphasized different concepts and as a result,
the course required a whole new set of section notes. Furthermore, the
course had a much smaller staff than the previous classes I had taught. As a result,
I ended contributing to and writing many of the
<a href="http://cs61.seas.harvard.edu/wiki/2012/Section">section notes</a> for that year. I took
that as an opportunity to present the course material in a different light
from the way material was presented in lecture, hopefully providing confused students a
clearer picture of course concepts. In my second time teaching the class, I was one of
the few returning course staff from the previous year, and I felt honored
that Eddie valued my opinion
on what I thought were the good and bad parts from the previous year.</p></li>
<li><p><strong><a href="http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161/">CS161 Synchronization Problems</a></strong> - At the beginning of this semester, I was tasked
with writing the sychronization problems for the synchronization problem set. I
tried to phrase the problem in an amusing and instructive way, and hopefully
these problems will be used again in future offerings of the class.</p></li>
</ul>


<p>In summary, an undergraduate teaching fellow can have a <strong>huge and lasting impact</strong>
on a course, including coming up with new assignments, writing new section notes, or
directing the overall direction of a course.</p>

<h2>Lessons Learned</h2>

<p>After teaching in so many different classes and so many different
students over the past three years, I&#8217;ve learned a few lessons:</p>

<ul>
<li><p><strong>Students can achieve more than they think they can.</strong> I remember before teaching my very
first section for CS50, I was told that my section was a &#8220;More Comfortable&#8221; section. In CS50,
students are placed into sections based on how they self-identify themselves into the buckets
&#8220;Less Comfortable&#8221;, &#8220;More Comfortable&#8221;, and &#8220;Somwhere In Between.&#8221; As a result, I spent that
week preparing material I thought would be appropriate for more advanced students (material
including code labs and fun brain teaser technical interview questions). When I stepped
into the very first section and double checked with students that this was a more comfortable
section, they all gave me grim stares of horror and told me that the section was actually
&#8220;Somewhere in Between.&#8221; It turns out that the head TFs for the class had accidentally
informed incorrectly about my section. However, I still taught the section as if it were
more comfortable: I still prepared for the code labs and brain teaser coding questions,
and I tried to be as clear and instructive as I could in my slides and explanations
of course concepts. At the end of the semester, many of the students did very well
in the class and thought section was taught at an appropriate, if not slow, pace.
As a result, I learned that students can undervalue their abilities: the
students regarded themselves as &#8220;somewhere in between&#8221; when they achieved just as well
as the &#8220;more comfortable&#8221; students.</p></li>
<li><p><strong>Make section relevent and useful for the students who attend.</strong>
In all of the courses that I&#8217;ve
taught, section was always optional but highly encouraged. I&#8217;ve been in many classes
were I had required section that I thought was pointless, or I&#8217;ve attended optional sections
only to find them unhelpful, discouraging me from attending future sections. As a result,
I highly value the students&#8217; opinion when I do have the privilege of them
attending my section, I want to make all of my sections helpful and useful for
the students that choose to attend. To do this, for CS50,
CS51, and CS61, I would always email a short anonymous feedback survey to students in
my section
to see what they thought was good and bad, and what they wanted to cover the following
week. I took this feedback to heart when planning material for sectiones, and as a result,
my sections always had a consistently near 100% (and for CS61 my first time, > 100%)
attendance, when many other sectiones taught by other course staff had lower a lower
attendance rate.</p></li>
<li><p><strong>Effective teaching requires planning, planning, planning.</strong> Before every section,
I would always plan out the agenda for the section, making sure every concept transitioned
smoothly to the next, and I had clear explanations and guiding questions to motivate
the material. Often, planning took longer than the actual length of time of section.
I learned very quickly that I was better and more comfortable teaching
using the white board/chalk board than using a slideshow. Using the board allowed
for more interactivity with students, and it made it easier to draw diagrams. Also,
writing things down on the board give time for students to pause and think, whereas
it is often difficult for students to read the text on slides while at the same time
having to listen to what the instructor has to say. As a result, I filled notebooks
with notes on how I would present the material in section, carefully planning out
my boardwork, how to make the most effective use of the board, and planning
diagrams I would use to explain the concepts. From this experience,
I learned to appreciate and admire the planning teachers have to do in preparation for
classes, and I also learned that I greatly enjoy the lesson planning part
of teaching.</p></li>
<li><p><strong>The most valuable thing you can do for students at office hours is to teach
students how to discover the answers themselves.</strong> One of the things I&#8217;ve
learned in my four years as an undergraduate is how to go about searching for
an answer to a question&#8211;often involving googling, experimenting at the command line,
and code reading. As I&#8217;ve moved on to higher level and more difficult courses,
the thing that I notice more about the more advanced students is their ability
to independently acknowledge what they don&#8217;t know, and then take the initiative to
go about searching for the answer themselves. My experience with CS50 office hours
typically involved conversations of the form: &#8220;Student: Things don&#8217;t work,
can you fix it? Me: what have you tried? Student: not much.&#8221; and the student
would then sit with me until the problem was resolved. At office hours for CS161,
the conversations are typically of the form: &#8220;Student: Things don&#8217;t work,
do you have any ideas why? Me: what have you tried? Student: gdb, grep, find,
binary searching the problem&#8230;&#8221; As a result, I realize that what makes students
more &#8220;advanced&#8221; is their ability to self-diagnose their own problems and take
the initiative to resolve them. Thus, my philosophy for office hours is to emphasize
teaching students the tools to go about solving a problem instead of telling
them the answer directly. One of my students
remarked on this philosophy in a comment in the Q guide,
stating &#8220;Kenny has tough love at office hours.&#8221;</p></li>
<li><p><strong>Grading is very difficult.</strong> For me, grading is typically the most difficult
and time consuming part of being a TF. Automated testing for correctness is
not enough, as students typically (and rightfully) want in-depth feedback on how
they can improve. As a result, much of my experience grading as a TF has been
learning how to give appropriate and useful feedback, and I still have much to learn
in this area.</p></li>
<li><p><strong>Professors are people too.</strong> When you&#8217;re taking a class and spending many
all-nighters on a problem set, it&#8217;s easy to assume the professors are monsters
and forget
that professors are people too with their own lives, families, and goals.
After working with four different instructors on their course staff, I see
the course from the course staff point of view and I begin to understand
why professors structure the courses the way they do, and how much they do
in fact care about their courses and students, despite them not seeming to do
so when you&#8217;re up coding late into the early morning.</p></li>
</ul>


<h2>Advice for Current and Future Undergraduates</h2>

<p>After all the lessons I&#8217;ve learned and work I&#8217;ve put into teaching, I highly
encourage other undergraduates to consider teaching as well for the following
reasons:</p>

<ul>
<li><p><strong>Teaching is a great opportunity to get to know professors.</strong> For large
lecture classes (typically the intro courses), it can be very difficult
to get an opportunity to talk one-on-one with professors and have them
know who you are. When you are on the course staff, the instructor personally
relies on you and the other course staff to run the course.
You get the rare opportunity to work with them and get to know them
on a more personal level.</p></li>
<li><p><strong>You don&#8217;t really understand the material until you have to teach it to someone else.</strong>
Teaching is great opportunity to review and solidify your understanding of
the course material, and in my experience when I teach, I always learn something
that I didn&#8217;t know when I first learned the material.</p></li>
<li><p><strong>You get to see how a course is run and control the direction of a course.</strong>
When you&#8217;re on the course staff, you see and run everything: the infrastructure
for distributing and receiving student submissions, the scripts and tools
used for grading, the discussions for deciding what to cover in the next lecture, section
or assignment, and more. As a result, course staff can typically have a large
impact on a course, including coming up with new assignments, section material, or
guiding the direction of the course material.</p></li>
<li><p><strong>You become a mentor figure for underclassmen.</strong> I still remember the legendary
TFs I&#8217;ve had and how I admire them want to emulate them. When you teach,
you often become a mentor for students entering the concentration, and you can
have a large influence on the courses they choose and how they progress
through their time at Harvard within the concentration.</p></li>
</ul>


<p>Of course, there are downsides as well for being a teaching fellow:</p>

<ul>
<li><p><strong>Office hours is 24/7, even for classes you&#8217;re not teaching.</strong> For large classes,
you often have many friends in the class. As a result, friends will direct
their questions to you in-person, through instant message, and through many other
means even when you&#8217;re not having office hours. You&#8217;ll also get questions for
classes that you&#8217;re not teaching. It can be difficult to draw the boundary
between being a helpful friend and being a teaching fellow.</p></li>
<li><p><strong>It is time consuming.</strong> This semester, I&#8217;ve probably spent more time working on
CS161-related work than any of my actual courses. Office hours, teaching, preparing
for section, grading, attending lecture (for the hybrid classroom) can really add up.
In my opinion, it&#8217;s like taking a fifth class.</p></li>
</ul>


<h2>Three Years Later</h2>

<p>After three years of teaching, 4 different classes,
3 <a href="http://bokcenter.harvard.edu/icb/icb.do?keyword=k1985&amp;pageid=icb.page29684">Certificates of Excellence in Teaching</a>, over 40 sections taught, and nearly 100 students I&#8217;ve
had the privilege of teaching, I&#8217;ve seen some of my own students become
teaching fellows for the same classes or other classes (I&#8217;m a grand-TF, haha),
and I like to think
I influenced their decision in some way. I&#8217;ve also had many underclassmen
in my section ask for computer science advice, and I&#8217;ve now seen them advanced
through multiple classes within the concentration.</p>

<p>I want to personally thank David, Greg, Eddie, and Margo for giving me the
opportunity to work with them and teach: teaching has definitely influenced
my undergraduate experiece in a significant and positive way, and college
would not have been the same without it.</p>

<p>Being a teaching fellow has been an important experience for me in
terms of self-discovery: I learned that I really like to teach and plan lessons,
and this makes me want to pursue some teaching-related work in my future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Synchronization Problems for OS161]]></title>
    <link href="http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161/"/>
    <updated>2014-03-20T01:25:00-04:00</updated>
    <id>http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161</id>
    <content type="html"><![CDATA[<p>This semester, I have the privilege of being a teaching fellow
for Harvard&#8217;s legendary <a href="http://www.eecs.harvard.edu/~margo/cs161/">operating systems class</a>,
and I was tasked with writing the synchronization problems for
this year&#8217;s synchprobs assignment! The goal of these problems
is to get students to think carefully about the synchronization
primitives and data structures needed to solve highly concurrent
problems, avoiding the usual problems that come with concurrency:
race conditions, deadlock, starvation, etc.</p>

<p>I remember how fun these problems
were last year (forming little fellowships of the ring and piazza posts,
meant to mimic creating barriers and reader-writer locks), and
I wanted to make sure the problems were just as fun this year.
I was tasked specifically to write problems to mimic the
synchronization one would use to implement <code>waitpid()</code>/<code>exit()</code>
(how would you do it?) and the synchronization needed
between address spaces and the coremap when implementing
a virtual memory system in the third assignment. Given
these specifications, I came up with
<strong>Singing Cows</strong> and <strong><del>Hunger</del> Deletion Games</strong> synchprobs!</p>

<!-- more -->


<p>To keep up with the playful spirit of the problems, I
disguised the waitpid/exit problem as a <strong>Singing Cows Problem</strong>:
a daddy cow must wait until each baby cow finishes
singing &#8220;Call Me Maybe&#8221; before the daddy cow can congratulate
the baby! The final version of the problem eventually
mimicked <code>wait()</code> instead, essentially making the daddy
cow wait until <strong>any</strong> baby cow finishes singing.</p>

<p>I had just watched <em>Hunger Games: Catching Fire</em>, and this
was my inspiration for the second problem: <strong><del>Hunger</del> Deletion Games</strong>.
In this problem, Katniss and Peeta each have multiple threads
and are attempting to sever mappings between the districts
and the capitol (for the sake of the problem, assume there
are <code>NSLOTS</code> districts). These mappings are represented
by a bijection between
capitol slots and district slots. The catch in this problem,
however, is that Katniss and Peeta are concurrently deleting
from opposite sides (Katniss from the capitol side and Peeta
from the district side), so students must avoid
both race conditions (concurrent deletions of the same slot)
and deadlock (concurrent deletions of the same mapping
from opposite sides). This situation mimics the coremap-address
space situation in which threads handling a page fault
need to access a page table entry and then
a coremap entry, while a cleaner thread simultaenously needs
to access a coremap entry and then the corresponding page
table entry. I remember it took me several weeks last year to fully
understand the synchronization needed for this coremap-address space
situation, and I was curious to see what kinds of solutions
students came up with. How would <strong>you</strong> solve this problem?</p>

<p>To see the source code for the problems and scripts to
check the solutions, see the <a href="https://github.com/kennyyu/cs161-a1scripts">github repo</a>.</p>

<p>The problem statements are shown below. Correct implementations should
avoid big lock solutions, and should not allow race conditions,
deadlocks, and starvation.</p>

<h2>Singing Cows</h2>

<p>A cow has many children. Each baby cow puts on a performance by singing
lyrics to &#8220;Call Me Maybe.&#8221; Like a good parent, the daddy cow must
sit through each one of its baby cow&#8217;s performances until the end, in order
to say &#8220;Congratulations Baby N!&#8221; where N corresponds to the N-th baby cow.</p>

<p>At any given moment, there is a single parent cow and possibly multiple
baby cows singing. The parent cow is not allowed to congratulate a baby
cow until that baby cow has finished singing. Your solution CANNOT
wait for ALL the cows to finish before starting to congratulate the babies.</p>

<p>Here is an example of correct looking output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>Baby   1 Cow: Hot night, wind was blowin'
</span><span class='line'>Baby   2 Cow: Ripped jeans, skin was showin'
</span><span class='line'>Baby   4 Cow: Don't ask me, I'll never tell
</span><span class='line'>Baby   5 Cow: And this is crazy
</span><span class='line'>Baby   8 Cow: Hot night, wind was blowin'
</span><span class='line'>Parent   Cow: Congratulations Baby 7!
</span><span class='line'>Baby   1 Cow: And now you're in my way
</span><span class='line'>Baby   2 Cow: And now you're in my way
</span><span class='line'>Baby   4 Cow: Hey, I just met you
</span><span class='line'>Baby   5 Cow: Pennies and dimes for a kiss
</span><span class='line'>Baby   8 Cow: But now you're in my way
</span><span class='line'>Parent   Cow: Congratulations Baby 1!
</span><span class='line'>Baby   2 Cow: Ripped jeans, skin was showin'
</span><span class='line'>Baby   4 Cow: I'd trade my soul for a wish
</span><span class='line'>Baby   8 Cow: Hey, I just met you
</span><span class='line'>Parent   Cow: Congratulations Baby 5!
</span><span class='line'>Baby   2 Cow: Your stare was holdin'
</span><span class='line'>Baby   4 Cow: But now you're in my way
</span><span class='line'>Baby   8 Cow: Don't ask me, I'll never tell
</span><span class='line'>Baby   2 Cow: Your stare was holdin'
</span><span class='line'>Baby   4 Cow: Hot night, wind was blowin'
</span><span class='line'>Baby   8 Cow: But now you're in my way
</span><span class='line'>Baby   2 Cow: Your stare was holdin'
</span><span class='line'>Baby   4 Cow: I'd trade my soul for a wish
</span><span class='line'>Baby   8 Cow: But here's my number
</span><span class='line'>Baby   2 Cow: Ripped jeans, skin was showin'
</span><span class='line'>Baby   4 Cow: But now you're in my way
</span><span class='line'>Baby   8 Cow: But now you're in my way
</span><span class='line'>Parent   Cow: Congratulations Baby 2!
</span><span class='line'>Baby   4 Cow: Your stare was holdin'
</span><span class='line'>Baby   8 Cow: Hey, I just met you
</span><span class='line'>Baby   4 Cow: And this is crazy
</span><span class='line'>Baby   8 Cow: I wasn't looking for this</span></code></pre></td></tr></table></div></figure>


<h2><del>Hunger</del> Deletion Games</h2>

<p>Katniss and Peeta are tired of Hunger Games and want to play a new kind
of game instead, the Deletion Games! They want to sever all ties between
the Capitol and all of its districts (for the sake of this problem, assume
that there are actually <code>NSLOTS</code> districts). Katniss is severing ties
from the Capitol side, and Peeta is severing ties from the Districts&#8217; side.</p>

<p>There is a 1:1 correspondence between <code>capitol_slots</code> and <code>district_slots</code>. This
means that each slot in <code>capitol_slots</code> has exactly one corresponding entry in
<code>district_slots</code>, and each slot in <code>district_slots</code> has exactly one corresponding
entry in <code>capitol_slots</code>. More formally:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>For all i in {0, 1, 2, ..., NSLOTS - 1},
</span><span class='line'>if capitol_slot[i].is_mapped == true, then
</span><span class='line'>district_slot[capitol_slot[i].district_index].is_mapped == true AND
</span><span class='line'>district_slot[capitol_slot[i].district_index].capitol_index == i
</span><span class='line'>
</span><span class='line'>AND similarly if district_slot[i].is_mapped == true.</span></code></pre></td></tr></table></div></figure>


<p>Katniss and Peeta each will use <code>NTHREADS</code> to delete these mappings. Katniss
will delete mappings based on randomly generated capitol indices, and Peeta
will delete mappings based on randomly generated district indices.</p>

<p>For example, suppose Katniss randomly chooses capitol index 4 to delete.
She looks at capital slot 4, sees that the slot is still mapped, and finds
the corresponding district index is 12. Then Katniss will free the mappings
in capitol slot 4 and district slot 12.</p>

<p>Suppose Peeta, on the other hand, randomly chooses district index 12 to
delete. He looks at district slot 12, sees that the slot is still mapped,
and finds the corresponding capitol index is 4. Then Peeta will free the
mappings in district slot 12 and capitol slot 4.</p>

<p>However, without proper synchronization, we may get:</p>

<ul>
<li>race conditions: if multiple threads attempt to delete the same mappings at the same time</li>
<li>deadlock: Katniss and Peeta try to delete the (capitol 4, district 12)
mappings at the same time starting from opposite sides</li>
<li>starvation: all the mappings must eventually be deleted</li>
</ul>


<p>Your solution must satisfy these conditions:</p>

<ul>
<li>Avoid race conditions.</li>
<li>Avoid any unsynchronized reads (reads on a shared variable without holding the mutex for that variable).</li>
<li>No threads may exit until all the mappings have been deleted.</li>
<li>Guarantee no deadlock can occur. Your invariants and comments should
provide a convincing proof of this.
HINT: You should insert well-placed <code>thread_yield()</code> calls in your code to
convince yourself of no deadlock.</li>
<li>When Katniss and Peeta generate random indices to delete, you may decide
to IGNORE that index if you wish and move onto the next index. However,
all mappings must eventually be deleted.
HINT: Use this to your advantage to introduce some asymmetry to the
problem.</li>
</ul>


<p>Here is an example of correct looking output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>{who: katniss, capitol: 86, district: 16, deleted: 114}
</span><span class='line'>{who: katniss, capitol: 108, district: 97, deleted: 115}
</span><span class='line'>{who: peeta, capitol: 89, district: 13, deleted: 116}
</span><span class='line'>{who: katniss, capitol: 103, district: 49, deleted: 117}
</span><span class='line'>{who: katniss, capitol: 5, district: 91, deleted: 118}
</span><span class='line'>{who: peeta, capitol: 57, district: 44, deleted: 119}
</span><span class='line'>{who: katniss, capitol: 39, district: 81, deleted: 120}
</span><span class='line'>{who: katniss, capitol: 55, district: 96, deleted: 121}
</span><span class='line'>{who: peeta, capitol: 101, district: 64, deleted: 122}
</span><span class='line'>{who: katniss, capitol: 44, district: 58, deleted: 123}
</span><span class='line'>{who: katniss, capitol: 59, district: 78, deleted: 124}
</span><span class='line'>{who: katniss, capitol: 80, district: 85, deleted: 125}
</span><span class='line'>{who: katniss, capitol: 122, district: 88, deleted: 126}
</span><span class='line'>{who: katniss, capitol: 67, district: 114, deleted: 127}
</span><span class='line'>{who: katniss, capitol: 61, district: 17, deleted: 128}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C Error Handling]]></title>
    <link href="http://kennyyu.me/blog/2014/03/19/c-error-handling/"/>
    <updated>2014-03-19T19:42:00-04:00</updated>
    <id>http://kennyyu.me/blog/2014/03/19/c-error-handling</id>
    <content type="html"><![CDATA[<p>After taking an <a href="http://www.eecs.harvard.edu/~margo/cs161/">operating systems class</a>
last year and taking a
<a href="http://stratos.seas.harvard.edu/classes/cs165-data-systems">data systems class</a> this semester, I&#8217;ve picked up a few patterns
to make it easier to handle error conditions in C.</p>

<p>Consider the following example from my data systems class, where I initialize
a directory to act as persistent storage for my database.</p>

<figure class='code'><figcaption><span>storage struct</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">storage</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">st_dbdir</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>   <span class="c1">// name of the db directory</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">st_file</span><span class="p">;</span> <span class="c1">// pointer to metadata file</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">lock</span> <span class="o">*</span><span class="n">st_lock</span><span class="p">;</span> <span class="c1">// protect addition of columns</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">columnarray</span> <span class="o">*</span><span class="n">st_open_cols</span><span class="p">;</span> <span class="c1">// array of open columns</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Here&#8217;s a first pass at initializing a storage struct. In this example,
I ignore all errors and will throw an assertion error if an error
occurs.</p>

<figure class='code'><figcaption><span>storage: naive initialization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">storage</span> <span class="o">*</span>
</span><span class='line'><span class="nf">storage_init</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">dbdir</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">storage</span> <span class="o">*</span><span class="n">storage</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">storage</span><span class="p">));</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">storage</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span> <span class="o">=</span> <span class="n">lock_create</span><span class="p">();</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span> <span class="o">=</span> <span class="n">columnarray_create</span><span class="p">();</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">mkdir</span><span class="p">(</span><span class="n">dbdir</span><span class="p">,</span> <span class="n">S_IRWXU</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_dbdir</span><span class="p">,</span> <span class="n">dbdir</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%s/%s&quot;</span><span class="p">,</span> <span class="n">dbdir</span><span class="p">,</span> <span class="n">METADATA_FILENAME</span><span class="p">);</span>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_file</span> <span class="o">=</span> <span class="n">file_open</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_file</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">storage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, this is not robust. If any of the operations return
an error, we would get an assertion failure and our server
process would exit unexpectedly. Thus, we need to check for errors
and cleanup all the calls that occurred before the error.</p>

<figure class='code'><figcaption><span>storage: quadratic error handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">storage</span> <span class="o">*</span>
</span><span class='line'><span class="nf">storage_init</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">dbdir</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">storage</span> <span class="o">*</span><span class="n">storage</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">storage</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">storage</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span> <span class="o">=</span> <span class="n">lock_create</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">storage</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span> <span class="o">=</span> <span class="n">columnarray_create</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">lock_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">storage</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mkdir</span><span class="p">(</span><span class="n">dbdir</span><span class="p">,</span> <span class="n">S_IRWXU</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">columnarray_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span><span class="p">);</span>
</span><span class='line'>        <span class="n">lock_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">storage</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_dbdir</span><span class="p">,</span> <span class="n">dbdir</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%s/%s&quot;</span><span class="p">,</span> <span class="n">dbdir</span><span class="p">,</span> <span class="n">METADATA_FILENAME</span><span class="p">);</span>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_file</span> <span class="o">=</span> <span class="n">file_open</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_file</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="n">rmdir</span><span class="p">(</span><span class="n">dbdir</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">columnarray_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span><span class="p">);</span>
</span><span class='line'>        <span class="n">lock_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">storage</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">storage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, performing error handling naively like this
results in quadratic growth in cleanup operations: each
error checking needs to cleanup every operation before it,
and as a result, the <code>free(storage)</code> line gets repeated
multiple times. Can we do better?</p>

<p>Yes! The key to this is use <code>goto</code> statements. Many
introductory computer science courses discourage use
of goto statements, and rightfully so: goto statements,
if used inappropriately, can lead to spaghetti code
and can make code very difficult to reason about. However,
error handling is a perfect use for goto statements
to avoid quadratic code growth.</p>

<figure class='code'><figcaption><span>storage: goto error handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">storage</span> <span class="o">*</span>
</span><span class='line'><span class="nf">storage_init</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">dbdir</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">storage</span> <span class="o">*</span><span class="n">storage</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">storage</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">storage</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">done</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span> <span class="o">=</span> <span class="n">lock_create</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">cleanup_malloc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span> <span class="o">=</span> <span class="n">columnarray_create</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">cleanup_lock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mkdir</span><span class="p">(</span><span class="n">dbdir</span><span class="p">,</span> <span class="n">S_IRWXU</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">cleanup_colarray</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_dbdir</span><span class="p">,</span> <span class="n">dbdir</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%s/%s&quot;</span><span class="p">,</span> <span class="n">dbdir</span><span class="p">,</span> <span class="n">METADATA_FILENAME</span><span class="p">);</span>
</span><span class='line'>    <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_file</span> <span class="o">=</span> <span class="n">file_open</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_file</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">cleanup_mkdir</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// success</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">done</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">cleanup_mkdir:</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">rmdir</span><span class="p">(</span><span class="n">dbdir</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">cleanup_colarray:</span>
</span><span class='line'>    <span class="n">columnarray_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">cleanup_lock:</span>
</span><span class='line'>    <span class="n">lock_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">cleanup_malloc:</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">storage</span><span class="p">);</span>
</span><span class='line'>    <span class="n">storage</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">done:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">storage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By laying out
the error handling code labels in reverse order in which
the operations were invoked, we can quickly jump
to the appropriate position to start cleaning up
all the operations that occurred before it. This eliminates
the quadratic code growth in error handling! Furthermore,
there is only one exit point of this function (at the very
bottom), and reasoning about exit points for this version
is much easier than the previous version, especially
when we throw in concurrencry primitives and needing to remember
to release locks.</p>

<p>To eliminate the boiler plate of checking the return value
and then jumping to the appropriate label on error, I wrote
a couple of useful macros. It relies on design decision
to make all functions that may have an error:</p>

<ol>
<li>Return <code>NULL</code> (e.g., if the function allocates a data structure)</li>
<li>Return <code>int</code>, where the int is an error code specific to your application, and 0 is success.</li>
</ol>


<figure class='code'><figcaption><span>dberror.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef _DBERROR_H_</span>
</span><span class='line'><span class="cp">#define _DBERROR_H_</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">dberror</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DBSUCCESS</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DBENOMEM</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...</span> <span class="c1">// other errors</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dberror_string</span><span class="p">(</span><span class="k">enum</span> <span class="n">dberror</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">dberror_log</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">msg</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span>
</span><span class='line'>                 <span class="kt">int</span> <span class="n">line</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">func</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define DBLOG(result) \</span>
</span><span class='line'><span class="cp">        dberror_log((char *) dberror_string((result)), \</span>
</span><span class='line'><span class="cp">                     __FILE__, __LINE__, __func__);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, I define an enumeration <code>enum dberror</code> to represent
the different kinds of error codes for my database application.
I also provide a <code>DBLOG(result)</code> macro which, when given an error
code, prints out the human readable string for that code, as well
as the file, line number, and function where <code>DBLOG</code> was invoked.
By designing your internal API using the two points above and invoking
<code>DBLOG</code> every time an error occurs, we effectively get a stack
trace for every error!</p>

<p>Now let&#8217;s combine this error logging facility to reduce the
boiler plate for the error handling code above.</p>

<figure class='code'><figcaption><span>try.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef _TRY_H_</span>
</span><span class='line'><span class="cp">#define _TRY_H_</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stddef.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;dberror.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TRY(result, expr, cleanup) \</span>
</span><span class='line'><span class="cp">    (result) = (expr); \</span>
</span><span class='line'><span class="cp">    if ((result)) { \</span>
</span><span class='line'><span class="cp">        DBLOG((result)); \</span>
</span><span class='line'><span class="cp">        goto cleanup; \</span>
</span><span class='line'><span class="cp">    }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TRYNULL(result, err, var, expr, cleanup) \</span>
</span><span class='line'><span class="cp">    (var) = (expr); \</span>
</span><span class='line'><span class="cp">    if ((var) == NULL) { \</span>
</span><span class='line'><span class="cp">        (result) = (err); \</span>
</span><span class='line'><span class="cp">        DBLOG((result)); \</span>
</span><span class='line'><span class="cp">        goto cleanup; \</span>
</span><span class='line'><span class="cp">    }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>TRY</code> macro allows us to execute <code>expr</code>, and if
that returns a nonzero error code, we jump to the provided
cleanup label.</p>

<p>The <code>TRYNULL</code> macro is similar&#8211;it assigns <code>var</code> to be the
result of <code>expr</code>, checks if <code>var</code> is <code>NULL</code>, and if it is,
assigns the appropriate error code to result and jumps to
the cleanup label.</p>

<p>Using this, let&#8217;s write our final version of storage:</p>

<figure class='code'><figcaption><span>storage: try pattern</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">storage</span> <span class="o">*</span>
</span><span class='line'><span class="nf">storage_init</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">dbdir</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">storage</span> <span class="o">*</span><span class="n">storage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TRYNULL</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">DBENOMEM</span><span class="p">,</span> <span class="n">storage</span><span class="p">,</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">storage</span><span class="p">)),</span> <span class="n">done</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TRYNULL</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">DBENOMEM</span><span class="p">,</span> <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span><span class="p">,</span> <span class="n">lock_create</span><span class="p">(),</span> <span class="n">cleanup_malloc</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TRYNULL</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">DBENOMEM</span><span class="p">,</span> <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span><span class="p">,</span> <span class="n">columnarray_create</span><span class="p">(),</span> <span class="n">cleanup_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TRY</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">mkdir</span><span class="p">(</span><span class="n">dbdir</span><span class="p">,</span> <span class="n">S_IRWXU</span><span class="p">),</span> <span class="n">cleanup_colarray</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_dbdir</span><span class="p">,</span> <span class="n">dbdir</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%s/%s&quot;</span><span class="p">,</span> <span class="n">dbdir</span><span class="p">,</span> <span class="n">METADATA_FILENAME</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TRYNULL</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">DBEIONOFILE</span><span class="p">,</span> <span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_file</span><span class="p">,</span> <span class="n">file_open</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="n">cleanup_mkdir</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// success</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">done</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">cleanup_mkdir:</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">rmdir</span><span class="p">(</span><span class="n">dbdir</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">cleanup_colarray:</span>
</span><span class='line'>    <span class="n">columnarray_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_open_cols</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">cleanup_lock:</span>
</span><span class='line'>    <span class="n">lock_destroy</span><span class="p">(</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">st_lock</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">cleanup_malloc:</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">storage</span><span class="p">);</span>
</span><span class='line'>    <span class="n">storage</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">done:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">storage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice and simple! Here&#8217;s all the things that this pattern addressed:</p>

<ul>
<li>Allow error handling using only linear, and not quadratic, code growth.</li>
<li>Our <code>TRY</code> and <code>TRYNULL</code> macros eliminate the boiler plate, and automatically performs logging to give us a stack trace of errors.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Through Bootcamps]]></title>
    <link href="http://kennyyu.me/blog/2013/11/18/bootcamps/"/>
    <updated>2013-11-18T11:25:00-05:00</updated>
    <id>http://kennyyu.me/blog/2013/11/18/bootcamps</id>
    <content type="html"><![CDATA[<p>This semester, I&#8217;ve been writing and leading <a href="https://github.com/hcs/bootcamp-main/">bootcamps</a> as the
<a href="http://www.hcs.harvard.edu/">Harvard Computer Society</a> Bootcamp Manager. In the past, HCS has
had bootcamps on various topics including python, javascript, and git. Bootcamps are typically
targetted for students just starting computer science (fresh{wo}men, sophomores).</p>

<p>My goal this smester was to restart the bootcamps and to revamp the curriculum. In this post, I&#8217;ll talk about:</p>

<ol>
<li>The <strong>bootcamp curriculum</strong> I designed</li>
<li>The typical <strong>workflow</strong> for a bootcamp</li>
<li>The <strong>design decisions</strong> that went into writing these bootcamps</li>
<li>Some high level <strong>results</strong> (pull request numbers and summary of testimonials)</li>
<li><strong>Unedited testimonials</strong> from students in the bootcamps</li>
</ol>


<!-- more -->


<h2>Bootcamp Curriculum</h2>

<ol>
<li><p><a href="https://github.com/hcs/bootcamp-setup/wiki">Bootcamp Setup</a> and <a href="http://goo.gl/jk45W1">slides</a>.
From my experience leading bootcamps
last semester, I realized it is really hard to cater to so many different programming
backgrounds and machine setups. As a result, I chose to standardize and require students
to install a UNIX system with a package manager:</p>

<ul>
<li>OSX with <a href="http://brew.sh/">homebrew</a></li>
<li><a href="https://manual.cs50.net/appliance/">CS50 Appliance</a>, since most students are either taking
or have taken <a href="https://cs50.harvard.edu/">CS50</a>, Harvard&#8217;s Intro to Computer Science course.</li>
<li>Ubuntu virtual machine with VirtualBox or VMWare</li>
</ul>
</li>
<li><p><a href="https://github.com/hcs/bootcamp-unix/wiki">Intro to UNIX Part 1: Command Line</a> and <a href="http://goo.gl/5NJyWw">slides</a>.
This bootcamp presents the UNIX command line and the stdin, stdout, stderr, and pipe abstractions.
<a href="https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Scavenger-hunt">Exercises</a>
include scavenger hunts through a code base using <code>find</code>, <code>grep</code>, and piping
a sequence of commands together transform and analyze files.</p></li>
<li><p><a href="https://github.com/hcs/bootcamp-unix/wiki/Shell-scripts">Intro to UNIX Part 2: Shell Scripting</a> and <a href="http://goo.gl/kRpD4y">slides</a>.
This continues the introduction to UNIX with shell scripts. Exercises include:</p>

<ul>
<li>Writing a <a href="https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Shell-scripts">web scraper to scrape images from Amazon</a>
using only basic UNIX commands, and writing</li>
<li>A <a href="https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Mail-Merge-Shell-Script">mail merge script</a>.</li>
</ul>
</li>
<li><p><a href="https://github.com/hcs/bootcamp-git/wiki">Git and Github</a> and <a href="http://goo.gl/siE4CQ">slides</a>.
This bootcamp introduces students to version control and using git with Github. Exercises include</p>

<ul>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Scavenger-Hunt">Scavenger Hunt</a>
through a repository&#8217;s history (e.g. which commit introduced a change, who did it, checking out an old revision)</li>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Committing-and-Pushing">Committing and Pushing</a>. Have students
attempt to replicate a git history tree.</li>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Resolving-Merge-Conflicts">Resolving Merge Conflicts</a>.
I made a branch that would purposely cause a merge conflict when students attempt to merge the branch
into their master branch.</li>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Reverting-a-commit">Reverting a Commit</a>.</li>
<li><a href="https://github.com/hcs/bootcamp-git/wiki/Exercise-Making-a-Pull-Request">Making a Pull Request</a>. Students
create a pull request on github. This exercise allows students to make pull requests in the future
and to give me and the HCS board the opportunity to give them feedback on their work.</li>
</ul>
</li>
<li><p><a href="https://github.com/hcs/bootcamp-python/wiki">Intro to Python</a> and <a href="http://goo.gl/9ID3ad">slides</a>.
This bootcamp introduces students to basic feature of Python, including control flow and data structures
(lists, sets, dictionaries, tuples, strings). Exercises include:</p>

<ul>
<li><a href="https://github.com/hcs/bootcamp-python/wiki/Exercise-Hello-World">Hello World!</a>.
This also sets up a pull request to keep track of their work.</li>
<li><a href="https://github.com/hcs/bootcamp-python/wiki/Exercise-Spell-Checker">Spell Checker</a>. Inspired by CS50&#8217;s
<a href="http://cdn.cs50.net/2013/fall/psets/6/pset6/pset6.html">Spell Checker</a> problem set, I wanted to
show students how much Python abstracts many things away and makes programming in Python extremely
simple and easy.</li>
<li><a href="https://github.com/hcs/bootcamp-python/wiki/Exercise-Programming">Python Exercises</a>. This is an example
of test-driven development: we give students failing unit tests, and their job is to make
all the unit tests pass.</li>
</ul>
</li>
</ol>


<h2>Workflow</h2>

<p>I designed the workflow centered around github wiki pages and pull requests. Here&#8217;s the workflow for a typical bootcamp:</p>

<ol>
<li>Start reading the github wiki page for the bootcamp repository.</li>
<li>Fork the bootcamp repository and clone it to their local machines.</li>
<li>Do some of the exercises.</li>
<li>Setup a pull request using the original bootcamp respository as the base of the pull request,
and their master branch as the head of the pull request</li>
<li>Do some more exercises and push commits to their master branch, which will update their pull request.</li>
<li>Wait for feedback on the pull request.</li>
</ol>


<h2>Design Goals</h2>

<p>I designed the curriculum and workflow with multiple goals in mind:</p>

<ul>
<li><p><strong>Flipped Classroom.</strong> From my experience in classes with
<a href="http://www.eecs.harvard.edu/~margo/cs161/">flipped classrooms</a>,
students learn (at least with programing exercises) much better when they have hands-on
exercises with guidance from the instructor. With this in mind, I wrote all the bootcamps
to minimize the amount of lecturing I give and to maximize the amount of time students
would be programming and asking questions.</p></li>
<li><p><strong>Useful Software Engineering Skills.</strong> With these bootcamps, I wanted to provide
others with the exercises and support that I wish I had had as a freshmen&#8211;exercises
to teach some basic skills that would be useful not only in industry, but also
useful in an academic setting. From my experiences in internships and classes,
some of the most useful skills that have learned are</p>

<ol>
<li>using the command line effectively</li>
<li>scripting repetitive tasks (e.g. test harnesses, moving/editing files)</li>
<li>using version control</li>
<li>having a go-to language for quick prototyping and tasks</li>
</ol>
</li>
<li><p><strong>Start from Zero.</strong> Because HCS&#8217;s target audience is students with very
little programming experience, I wrote the bootcamps so that anyone starting
from zero programming experience could quickly get their environment setup
and start using the command line. Naturally, there will be students that
already have programming experience, and I supplemented the basic exercises
in bootcamps with more involved exercises that students can do on their
own pace.</p></li>
<li><p><strong>Feedback System.</strong> I believe it&#8217;s very important to get feedback
on your work, especially when programming for the first time. Therefore, I
designed the bootcamps to use github&#8217;s pull request feature for comments
and feedback. Pull requests allow us to leave in-line comments on code,
and to provide a comment-discussion feature for general feedback. I also
encouraged students to install the <a href="https://chrome.google.com/webstore/detail/gh-diff-highlight/gjljgldconccfbldbnnpbgahpckhjcfj">GH Diff Highlight Chrome Extension</a>
to colorize pull request diffs.</p>

<p><a href="https://github.com/hcs/bootcamp-python/pulls">Here</a> are examples of the
feedback we provided on the Intro to Python bootcamp.</p></li>
<li><p><strong>Reusable.</strong> I am a senior and will be graduating soon; as a result, I
want the bootcamps to be reusable after I leave. Because of this,
I made all the bootcamps open source github repositories
so that they may be reused, updated, and forked as necessary in the future.</p></li>
</ul>


<h2>Results</h2>

<p>Overall, attendance was generally higher than I expected. The attendance for
the setup and first two UNIX bootcamps were roughly 30-40 people, which
is one of the highest attendance rates HCS has had in a while for a bootcamp.
Naturally, as the semester progresses, students get more busy with midterms and assignments,
and so attendance dropped to about 20 for git, and a dozen or so for the Python
bootcamp. After each bootcamp, I posted a survey asking for feedback. I asked
the question:</p>

<blockquote><p>What did you think of the bootcamp? (What you liked, didn&#8217;t like, what was useful, wasn&#8217;t useful. What would you have done differently? etc.)</p></blockquote>

<p>The feedback was generally positive. The types of feedback were generally along one or
more of these categories (see the Testimonial section at the end for real responses):</p>

<ol>
<li>Hands-on flipped classroom sessions were helpful in helping students digest the material.</li>
<li>More advanced students wanted more challenging exercises.</li>
<li>Too fast/too slow.</li>
<li>Requests for review of material from previous sessions.</li>
</ol>


<p>In terms of numbers, the <a href="https://github.com/hcs/bootcamp-git/pulls">Git and Github Bootcamp</a> had 28 forks, with 16
students successfully submitting a pull request. The <a href="https://github.com/hcs/bootcamp-git/pulls">Python Bootcamp</a> had 16 forks,
with 10 students sucessfully submitting a pull request, and 4 students finishing all the python exercises.</p>

<p>From these numbers and testimonials, it seems that the flipped classroom model worked very well,
and the various levels of exercises and walkthroughs catered to both advanced and beginner students.</p>

<h2>Testimonials</h2>

<p>Below are the unedited and anonymized testimonials from students:</p>

<h3>UNIX Part 1: Command Line</h3>

<blockquote><p>This seems well done, albeit rather basic. Maybe mentioning &#8220;do one thing well&#8221; to explain why UNIX works the way it does.</p>

<p>I thought it was good since it taught me all the basics in one sitting</p>

<p>Like it.</p>

<p>I think this was great although taught a little quickly</p>

<p>Useful, but went a little slowly; Overall was run very well, learned some useful UNIX commands.</p>

<p>Very useful! I learned a lot about some of the basic commands available to us. I wish we&#8217;d dived into the scavenger hunt sooner so we could&#8217;ve had more time for it and the shell script exercise.</p>

<p>I liked how many functions could be linked to each other. That was really cool. Also how there are functions that allow tons of flexibility with the -char ability.</p>

<p>Very helpful especially one-on-one. Went through the slides a bit too fast</p>

<p>Awesome! While I&#8217;ve done a good amount of programming before, I haven&#8217;t had a chance to learn many of the covered UNIX commands&#8230; until now.</p>

<p>Thanks for an awesome class, Kenny!&#8221;</p>

<p>smaller room preferably</p>

<p>Scavenger hunt was fun. I&#8217;m glad I sat next to people who were more familiar with this material.</p>

<p>Ir was really useful.  I got a better sense of how to use the command line than ever before!  Thanks.</p>

<p>It got a little hectic at the end&#8230;</p>

<p>I thought it went a little too fast for me. But I enjoy the premises of the program. I just wish it was not so much like a class, but a collaboration so that everyone feels involved.</p>

<p>I thought it was a really good topic, but it moved to quickly for me. It also would have been nice if there were more people to answer questions, because that was really helpful. Along with piazza, it would be nice to have a small recap session to go over the topics and solidify them.</p>

<p>This was a good set of exercises.  I got distracted with unrelated things (c/p, sending the answers directly to answers.txt), so I lagged behind.</p>

<p>I liked it! I thought I knew shell scripting before, but now I feel more comfortable with channeling and piping and whatnot. :)</p>

<p>It was very informative!</p>

<p>I&#8217;ve learned a lot. It was very informative.</p>

<p>Great tutorial. Learned a lot about UNIX, especially piping.</p></blockquote>

<h3>UNIX Part 2: Shell Scripting</h3>

<blockquote><p>could have been a little more organized.  But people were very helpful.</p>

<p>Useful bootcamp, I didn&#8217;t know how to write shell scripts&#8230;</p>

<p>I liked having the recap of last week and generally enjoyed this exercise.  I like the presence of a second exercise for those who finish early.</p>

<p>Could&#8217;ve used more instruction on the scraper parts - using man over and over again got annoying</p></blockquote>

<h3>Git and Github</h3>

<blockquote><p>Awesome overview of git. I knew a bit coming in, but setting up the alias for my &#8220;lg&#8221; command was great, so that I can see my requests in a more aesthetically pleasing fashion. Maybe a bit more on creating branches to make temporary changes and then merging your own branch back.</p>

<p>github is harder than i expected–it&#8217;s like a whole new world of stuff! so it was largely a struggle but i think i learned a lot</p>

<p>Liked how straightforward it was. I would maybe have thrown in a challenge exercise</p>

<p>It was very fun and easy to understand. Plus, I learned a whole bunch of stuff I never knew before (and a lot of things unrelated to git, but useful as a whole, like how to use vim). :)</p>

<p>It was fantastic! I don&#8217;t think I would have done anything differently.</p>

<p>Useful, already knew a decent amount about git. The pace was good, wouldn&#8217;t have changed anything.</p>

<p>It is difficult but manageable</p>

<p>Exercises are nice.</p>

<p>It was great! And useful!</p>

<p>I thought the bootcamp was useful. Github is a lot more manageable and less confusing after today&#8217;s bootcamp. I&#8217;m glad I came.</p>

<p>This one was really good and understandable!</p>

<p>I wasn&#8217;t able to come to the bootcamp on Wednesday, but I just completed it on my own - the slides and online directions were really helpful, and I could pretty much figure most things out on my own.</p>

<p>On a side note, I also completed the mail merger exercise from last week&#8217;s bootcamp, and the solution didn&#8217;t follow the instructions that we were given, so that confused me a little.</p></blockquote>

<h3>Intro to Python</h3>

<blockquote><p>Pretty cool.  Exercises were nice, good practice.  I was already pretty familiar with Python, though, so not representative.</p>

<p>It was useful, especially the talk about CS classes and coursework!</p>

<p>This was a great lesson. The only problems I had were setting up git stuff, but that is mostly due to the fact that this was the first time I came up. There is not much to change other than perhaps moving a bit slower.</p>

<p>It was great! Learnt a lot about python. Especially liked the exercises that helped me get a little more used to python syntax.</p>

<p>I love to code and I love the exercises, as well as the debugger tests that let me see what I was doing wrong and which lines. Python is so applicable. To improve, I think we could get thai(Spice?) for the food next time to add variety.</p>

<p>I liked that it had fewer directed parts and relied more on us learning some of python&#8217;s capabilities on our own</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Omnibox GDrive Search]]></title>
    <link href="http://kennyyu.me/blog/2013/10/20/omnibox-gdrive-search/"/>
    <updated>2013-10-20T22:11:00-04:00</updated>
    <id>http://kennyyu.me/blog/2013/10/20/omnibox-gdrive-search</id>
    <content type="html"><![CDATA[<p><img src="http://kennyyu.me/images/omnibox-gdrive-search.png" alt="Omnibox GDrive Search" /></p>

<p>I published my first Chrome Extension: <a href="https://chrome.google.com/webstore/detail/omnibox-gdrive-search/faadbnlolclhboooficaklnhnkdjmdnb">Omnibox GDrive Search</a>!
The extension allows you to search your google drive for documents and then jump directly to them from the omnibox! See the <a href="https://github.com/kennyyu/omnibox-gdrive-search">code on github</a>.</p>

<p>In the omnibox, type <code>gd</code> and press <code>TAB</code>. Now you can enter your queries and jump directly to the file from the omnibox suggestions!</p>

<p>To use it, you must first authorize Google Drive metadata read-only access to the extension by following these instructions (see screenshots in extension link):</p>

<ol>
<li>Go to <code>chrome://extensions</code></li>
<li>Find this extension, and click &#8220;Options&#8221;</li>
<li>Click &#8220;Authorize&#8221;, and then click &#8220;Accept&#8221; to grant the extension access. This will redirect to a blank page. Close it, and refresh the options page.</li>
<li>If you see &#8220;You have already authorized this extension!&#8221;, then you can now search!</li>
</ol>


<p>By far, the most difficult part of the extension was understanding authorization with Google Drive. The extension is a bit
buggy and lags a little because the extension must renew the authorization with Google Drive every 15 minutes or so.
To get around this, the extension only requests authorization on the first use after the expiration and will
redirect the user to the options page.
Thus, if you&#8217;re using the extension for the first time in a while, it may take ~3 seconds before search results come back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pipeline for Improving Hand Tracking Accuracy]]></title>
    <link href="http://kennyyu.me/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy/"/>
    <updated>2012-12-10T21:48:00-05:00</updated>
    <id>http://kennyyu.me/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy</id>
    <content type="html"><![CDATA[<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/DFPg-9D46kE "></iframe></div>


<p>For my CS283: Computer Vision Final Project, I created an application to control Google Maps
using your hand and a webcam.</p>

<p>It uses the Chrome API to access the webcam, and frames are sent to a Tornado server that
runs the hand tracking pipeline, annotates the frame, and sends back the displacement
vector to update the view of the map. I am using OpenCV for it&#8217;s Haar Cascade libraries.</p>

<p>You can <a href="https://github.com/kennyyu/cs283-project">view the code on github</a>
and setup an instance of the server locally!</p>

<p>You can also <a href="https://www.dropbox.com/s/tnyzr1qt8fmnscp/hand-tracking-pipeline.pdf">view the paper</a>
I wrote to describe the process I used in the pipeline. Below is a summary of the problem
statement and the stages in the pipeline.</p>

<h1>Problem Statement</h1>

<p>Given a poorly trained Haar Cascade Classifier (250 positive samples and 100 negative samples) to recognize hands,
this project assembles a pipeline to improve the quality of the tracking. These steps include:</p>

<ol>
<li>Face detection and removal of faces.</li>
<li>Background subtraction.</li>
<li>Use a simplified Kalman-Filter-esque technique to estimate the bounding box of the hand. This assumes that a hand moves in a smooth manner.</li>
<li>Use our hand classifier to detect the largest hand within the bounding box.</li>
<li>Compute the optical flow of points within the bounding box using Lucas-Kanade.</li>
<li>Use the optical flow and the measured position of the hand to correct our Kalman-Filter estimate.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Flag Command Line Library]]></title>
    <link href="http://kennyyu.me/blog/2012/08/22/java-flag-command-line-library/"/>
    <updated>2012-08-22T18:07:00-04:00</updated>
    <id>http://kennyyu.me/blog/2012/08/22/java-flag-command-line-library</id>
    <content type="html"><![CDATA[<p>Inspired by other commmand line libraries, I decided to make my own Java flag
command line library <a href="https://github.com/kennyyu/flags">here</a>. It makes use
of Java&#8217;s Reflection capabilities to fill in the values of flags at runtime.
The library is fairly simple to use&#8211;it requires only declaring a static
field, and one invocation to <code>Flags.parse</code> in the <code>main</code> method of the
application. The library offers support for various wrapper types as well
as collection types.</p>

<p>As an example of using the library, you declare a flag using the
annotation <code>@FlagInfo</code> with the desired flag names and values.</p>

<figure class='code'><figcaption><span>MyApp.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">me.kennyyu.flags.Flag</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.kennyyu.flags.Flags</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApp</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@FlagInfo</span><span class="o">(</span><span class="n">help</span> <span class="o">=</span> <span class="s">&quot;maximum number of threads to use&quot;</span><span class="o">,</span> <span class="n">altName</span> <span class="o">=</span> <span class="s">&quot;n&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Flag</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">maxNumThreads</span> <span class="o">=</span> <span class="n">Flags</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@FlagInfo</span><span class="o">(</span><span class="n">help</span> <span class="o">=</span> <span class="s">&quot;use real logger&quot;</span><span class="o">,</span> <span class="n">altName</span> <span class="o">=</span> <span class="s">&quot;r&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Flag</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">useRealLogger</span> <span class="o">=</span> <span class="n">Flags</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@FlagInfo</span><span class="o">(</span><span class="n">help</span> <span class="o">=</span> <span class="s">&quot;input list&quot;</span><span class="o">,</span> <span class="n">altName</span> <span class="o">=</span> <span class="s">&quot;l&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Flag</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">inputList</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">Flags</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;());</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Flags</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maxNumThreads</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">useRealLogger</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputList</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you provide flag values at the command line like so:</p>

<figure class='code'><figcaption><span>Passing flags at the command line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>java MyApp --maxNumThreads<span class="o">=</span>5 --useRealLogger -l<span class="o">=</span>foo,bar,baz
</span></code></pre></td></tr></table></div></figure>


<p>All classes referenced from the main class with flags will be available as options.</p>

<p>In addition to learning how to use Java&#8217;s Reflection capabilities, this
was also an exercise in learning how to use Maven to build and deploy my
project. I am using a <a href="https://github.com/kennyyu/maven-repos">github project</a>
as a maven server.</p>

<p>See the <code>README.md</code> in the github directory for more information on how to
use it and install the library.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coupling and the Coupon Collector]]></title>
    <link href="http://kennyyu.me/blog/2012/06/24/coupling-and-the-coupon-collector/"/>
    <updated>2012-06-24T21:43:00-04:00</updated>
    <id>http://kennyyu.me/blog/2012/06/24/coupling-and-the-coupon-collector</id>
    <content type="html"><![CDATA[<p>In the fall semester last year, I took <a href="http://blog.bokcenter.harvard.edu/2012/01/23/stat-110-lectures-are-now-available-on-itunesu/">Stat 110</a>,
an introductory
statistics course focusing on probability. I had done probability in contest
math from high school, but this course was my first real rigorous treatment
of probability.</p>

<p>One of the most interesting problems I saw in the course involves Markov chains
and a simple and elegant solution using another interesting problem we saw
earlier in the course&#8211;<a href="http://en.wikipedia.org/wiki/Coupon_collector%27s_problem">the coupon collector&#8217;s problem</a>.</p>

<h2>Random-to-Top Shuffling Problem</h2>

<p>Suppose $n$ cards are placed in order on a table. Consider the following shuffling
procedure: Pick a card at random from the deck and place it on top of the deck.
What is the expected number of times we need to repeat the process to arrive
at a &#8220;random&#8221; deck, for some suitable definition of &#8220;random&#8221;?</p>

<p>To solve this question, we&#8217;ll need to answer a seemingly unrelated question first.</p>

<h2>Coupon Collector&#8217;s Problem (aka. The Toy Collector&#8217;s Problem)</h2>

<p>A certain brand of cereal always distributes a toy in every cereal box. The toy
chosen for each box is chosen randomly from a set of $n$ distinct toys. A toy
collector wishes to collect all $n$ distinct toys. What is the expected number
of cereal boxes must the toy collector buy so that the toy collector collects
all $n$ distinct toys?</p>

<h2>Solution to the Toy Collector&#8217;s Problem</h2>

<p>The key to understanding this problem is to break the task of collecting all
$n$ distinct toys into different stages: what is the expected number of cereal
boxes that the toy collector has to buy to get the $i$-th new toy?</p>

<p>Let random variable $X_i$ be the number of boxes it takes for the toy collector
to collect the $i$-th new toy after the $i-1$-th toy has already been collected.
(Note: this does NOT mean assign numbers to toys
and then collect the $i$-th toy. Instead, this means that after $X_i$ boxes,
the toy collector would have collected $i$ distinct toys, but with only $X_i - 1$
boxes, the toy collector would have only collected $i-1$ distinct toys.)</p>

<p>Clearly $E(X_1) = 1$, because the toy collector starts off with no toys. Now
consider the $i$-th toy. After the $i-1$-th toy has been collected, then there
are $n - (i-1)$ possible toys that could be the new $i$-th toy. We can interpret
the process of waiting for the $i$-th new toy as a <a href="http://en.wikipedia.org/wiki/Geometric_distribution">geometric distribution</a>, where
each trial is buying another cereal box, &#8220;success&#8221; is getting any of the
$n - (i-1)$ uncollected toys, and
&#8220;failure&#8221; is getting any of the already collected $i - 1$ toys. From this point
of view, we see that
$$X_i - 1 \sim \textrm{Geom}(p)$$
where the probability of success $p$ is
$$p = \frac{n - (i-1)}{n}.$$</p>

<p>Here, our definition of the geometric distribution does NOT include the success.
Using the expectation of a geometric distribution, we have that the expected number
of cereal boxes the toy collector must collect to get the $i$-th new toy after
collecting $i-1$ toys is
$$E(X_i - 1) = \frac{1 - p}{p}$$
$$E(X_i) = \frac{1}{p} = \frac{n}{n - (i - 1)}.$$</p>

<p>Now let random variable $X$ to be the number of cereal boxes the toy collector
needs to buy to collect all $n$ distinct toys. Since we have separated the
process into collecting the $i$-th new toy, then
$$X = X_1 + X_2 + \cdots + X_n.$$</p>

<p>Using linearity of expectation, we can compute the expected value of $X$
by summing the individual expectations of $X_i$. Thus, we obtain the following
result:
$$E(X) = E(X_1 + X_2 + X_3 + \cdots + X_n)$$
$$E(X) = E(X_1) + E(X_2) + E(X_3) + \cdots + E(X_n)$$
$$E(X) = n\left( 1 + \frac{1}{2} + \frac{1}{3} + \cdots + \frac{1}{n} \right).$$</p>

<p>This is the harmonic series! The harmonic series diverges to infinity and
grows approximately as $\gamma + \log n$ where $\gamma \approx 0.57722$ is
Euler&#8217;s constant. Thus, we can approximate the expected number of cereal boxes with:
$$E(X) \approx n (\gamma + \log n).$$</p>

<h2>Solution to the Random-to-Top Shuffling Problem</h2>

<h3>Markov Chains and Stationary Distrubutions</h3>

<p>Coming back to the random-to-top shuffling problem, we first need to define
our notion of &#8220;random&#8221; for our deck. In order to do this, we use Markov chains.</p>

<p>For our Markov chain, let our states be all $n!$ permutations of $n$-card deck,
and two states are adjacent if and only if it is possible to reach one of the
states from the other through one step of this shuffle. For any state, we move to
one of its $n-1$ neighbors with probability $\frac{1}{n}$, or stay at the same
state with probability $\frac{1}{n}$. Since all of our $n!$ states has degree
$n$ (including loops), then by symmetry, the probability of having any
permutation is equally likely. Thus, the stationary distribution for our
random-to-top shuffling Markov process is the uniform vector
$$\vec{s} = \left(\frac{1}{n!}, &#8230;, \frac{1}{n!}\right).$$</p>

<p>Thus, to define our notion of a &#8220;random&#8221; deck, we would like that after
implementing our shuffling algorithm, the resulting deck is sampled from our
stationary distribution: that is, our resulting deck is equally likely
to be any of the $n!$ permutations.</p>

<h3>Coupling</h3>

<p>Now that we have established that our shuffling process can be modeled with
a Markov chain that has a stationary distribution, we use the idea of &#8220;coupling&#8221;
to arrive at our solution.</p>

<p>Let deck $A$ be our original deck, and let deck $B$ be uniformly randomly sampled
from all $n!$ permutations. Since the stationary distribution for our shuffling
process is the uniform distribution, then deck $B$ is sampled from the
stationary distribution.</p>

<p>We use the fact that if we start our Markov process from a state sampled
from the stationary distribution, then the resulting state will also be
sampled from the stationary distribution. More formally:</p>

<p><strong>Lemma.</strong> <em>Let $\vec{s}$
be the stationary distribution of our Markov chain.
Let $X_0$ be our starting state, and let it
be sampled from the stationary distribution (i.e. $P(X_0 = i) = s_i$). Then
the resulting state $X_1$ after running the Markov chain for one step
will also be sampled from $\vec{s}$</em>.</p>

<p>Now consider our &#8220;coupling&#8221; strategy: every time we move a card $C$ to the top
of deck $A$, we locate card $C$ in deck $B$ and place it on top of the deck.
Note that the physical process of how we chose card $C$ in the two decks is
different: we choose a random position in deck $A$, whereas we located card
$C$ in deck $B$. Although the process of how we chose card $C$ is different,
from deck $B$&#8217;s perspective, $C$ is simply a card selected at random. Using
our lemma, we have that deck $B$ still remains sampled from the stationary
distribution after moving card $C$ to the top of deck $B$.</p>

<p>We note that after $t$ steps, all the cards that have been touched
up to time $t$ will be in the same order on top of both decks.
When all the cards of deck A and deck B are in the same order
after some time $T$ steps, we will have that deck A and deck B are both
sampled from the stationary distribution (because B always stays
stationary through our coupling strategy). Thus, after $T$ steps,
deck A will satisfy our notion of a &#8220;random&#8221; deck. We wish to compute $E(T)$.</p>

<p>How do we compute $E(T)$? We note that both decks will be the same once we have
touched all the cards. Therefore, we wish to compute the expected number
of random-to-top shuffles needed to touch all the cards.
This is an instance of the coupon collector&#8217;s problem! Instead of
touching all $n$ cards, we wish the collect all $n$ coupons. Thus,
after approximately $n (\gamma + \log n)$
random-to-top shuffles, our original deck $A$
will be a &#8220;random&#8221; deck. For $n = 52$, we require $E(T) \approx 236$ shuffles
to randomize our deck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Twist on Binary Search]]></title>
    <link href="http://kennyyu.me/blog/2012/05/18/binary-search/"/>
    <updated>2012-05-18T12:00:00-04:00</updated>
    <id>http://kennyyu.me/blog/2012/05/18/binary-search</id>
    <content type="html"><![CDATA[<p>This past semester, I took a graduate course,
<a href="http://iacs.seas.harvard.edu/courses/cs207/">CS 207</a> - Systems Development
in Computational Science. In the course, we talked about good software
engineering practices in C++ (but the lessons span beyond C++), in particular
representation invariants, abstraction functions, and writing solid code
specifications so that one could even prove things about code. The professor made
a couple of <a href="http://read.seas.harvard.edu/cs207/2012/">blog</a>
 entries for some of the lectures, explaining cool tricks with iterators and bits.</p>

<p>Early in the semester, we discussed several implementations of binary search, starting
from a simplistic version and incrementally building up to a production-ready
version. I thought the binary search discussion was an extremely eye-opening
exercise; it was my first time seeing invariants being used in proofs to prove
properties about code.</p>

<p>Below is how I&#8217;ve written binary search since high school:</p>

<figure class='code'><figcaption><span>Binary Search, Attempt #1 - search.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/** Returns the index of any occurrence of @a x in @a a</span>
</span><span class='line'><span class="cm"> * @pre @a a has length equal to n</span>
</span><span class='line'><span class="cm"> * @pre @a a is sorted in increasing order</span>
</span><span class='line'><span class="cm"> * @return -1 if not found </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">binary_search</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">lo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">hi</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
</span><span class='line'>      <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, I am using <a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a> style comments
for my specifications. In this version of binary search, I return the index of
<em>any</em> occurence of item <code>x</code> in array <code>a</code>, or return <code>-1</code> if there is no such
occurrence. While this implementation is acceptable for an array of ints, it
is not particularly useful for other data types.</p>

<p>Using C++ templates, we can generalize this implementation to make it
polymorphic for any type <code>T</code>, provided we provide a suitable comparison function
<code>compare</code> where <code>compare(p,q)</code> returns true if and only if <code>p</code> is less than <code>q</code>
for some ordering of values of type <code>T</code>. Thus, here is our attempt #2 at binary
search:</p>

<figure class='code'><figcaption><span>Binary Search, Attempt #2 - search.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/** Returns the index of any occurrence of @a x in @a a</span>
</span><span class='line'><span class="cm"> * @param compare(p,q) returns true if p &lt; q</span>
</span><span class='line'><span class="cm"> * @pre @a a has length equal to @a n</span>
</span><span class='line'><span class="cm"> * @pre @a a is sorted by @a compare</span>
</span><span class='line'><span class="cm"> * @return -1 if not found </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">CMP</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">binary_search2</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">CMP</span> <span class="n">compare</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// fix overflow issues</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="p">],</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>      <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="p">]))</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in order to call binary search, we must provide a function object <code>compare</code>
that defines how we compare two elements of type <code>T</code>. Below is an example of how
we would invoke this version of binary search:</p>

<figure class='code'><figcaption><span>Calling Binary Search, Attempt #2 - search.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">IntComp</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">17</span><span class="p">};</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">binary_search2</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">IntComp</span><span class="p">())</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We overload <code>operator()</code> to allow <code>IntComp</code> objects to be invoked like functions,
and we pass an instance of <code>IntComp</code> to <code>binary_search2</code> whenever we perform
a binary search on an array of ints.</p>

<p>Note one other difference between the two versions of binary search: in
attempt #1, we had the line:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>whereas in attempt #2, we replaced this line with:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For all these years, I&#8217;ve been writing binary search incorrectly! In the first
version, we may run into integer overflow if <code>lo + hi</code> happen to be greater
than the maximum integer value for <code>int</code>! In the second version, we fix this
subtle bug by first subtracting <code>r</code> and <code>l</code>, then halving the difference and
add the result to <code>l</code> to calculate the new middle index <code>m</code>. By subtracting
first, we are guaranteed that <code>r - l</code> will not overflow (by the implicit
precondition that <code>r</code> and <code>l</code> are valid indices into the array and <code>r &gt; l</code>),
and thus <code>m</code> will also be a valid index into the array.</p>

<p>We have generalized our binary search to work on an array containing any type.
But, we have actually done more than this. In C++, iterators overload pointer
syntax to represent collections of items. Using iterators, we can represent
an entire range of items in a collection with only two iterators&#8211;one pointing
to the beginning of the collection, and one pointing to the &#8220;position&#8221; after
the last element in the collection.
See the CS 207 blog entries <a href="http://read.seas.harvard.edu/cs207/2012/">here</a>
for more information on C++ iterators. In our example, however, we represent
the array collection with a pointer to the first position and the number
of items in the list. Because binary search requires random access into our
collection, <em>any collection represented by a random access iterator</em> will be
able to use the second version of our binary search!</p>

<p>Can we still do better? In our specification for binary search, note that we
allowed the index of <em>any</em> occurrence of our search item <code>x</code> to be returned.
This ambiguity makes it difficult to make any real use of the return value of
binary search  (except simply to check whether the item is in the collection).
Instead of returning any index, what if we returned a <em>lower bound</em> position
of the element <code>x</code> in our collection? By lower bound, we mean the first index
into the array at which we should insert <code>x</code> and still keep the elements
in sorted order.</p>

<p>For example, with the array <code>{0, 1, 2, 5, 5, 5, 7, 9}</code>, the
lower bound of <code>0</code> would be <code>0</code>, because we can insert <code>0</code> into index <code>0</code> and
still keep our array sorted. The lower bound of <code>-1</code> is also <code>0</code> by a similar
reasoning. The lower bound of <code>5</code> is <code>3</code> because <code>3</code> is the smallest index that
we can insert <code>5</code> and keep the array sorted. Similarly, the lower bound of <code>6</code>
is <code>6</code>. Note that the lower bound of <code>10</code> is <code>8</code>, which is not a valid index
into the array. This is okay because the return value only indicates the index
that one <em>could</em> insert an item and maintain the sorted property of the array.</p>

<p>To implement this, we can think of the array as a collection of boolean values
where the entries are <code>{false, false, ..., false, true, true, ... true}</code> (all
the falses occur together at the beginning of the array). The boolean values
correspond to whether our target element <code>x</code> is less than or equal to the
value in that array position. Our goal, then, is to find the first <code>true</code> in
the array, or return the last position (indicating that placing <code>x</code> at the
end of the array would maintain the sorted property of our array). Building
on the polymorphism we introduced in attempt #2, here is attempt #3 using
the lower bound idea:</p>

<figure class='code'><figcaption><span>Binary Search, Attempt #3 - search.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/** Return the lower-bound position of @a x in @a a</span>
</span><span class='line'><span class="cm"> * @param compare(p,q) returns true if p &lt; q</span>
</span><span class='line'><span class="cm"> * @pre @a a has length equal to @a n</span>
</span><span class='line'><span class="cm"> * @pre @a a is sorted by @a compare</span>
</span><span class='line'><span class="cm"> * @post return R where 0 &lt;= R &lt;= @a n and:</span>
</span><span class='line'><span class="cm"> *   For all 0 &lt;= i &lt; n, </span>
</span><span class='line'><span class="cm"> *      i &lt; R iff a[i] &lt; x</span>
</span><span class='line'><span class="cm"> *      i &gt;= R iff a[i] &gt;= x </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">CMP</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">CMP</span> <span class="n">compare</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="p">],</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>      <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice, clean, and simple!</p>

<p>Note that this version uses only <em>one</em> comparison instead of two (as we did
in attempts #1 and #2)! This lower bound idea not only tells us whether our
element <code>x</code> is the array, but where we should place it to keep the list sorted!</p>

<p>This code looks simple enough to verify the correctness by eyeballing it; but
can we make this rigorous? Can we <em>prove</em> the correctness of this code? Yes!
Here is the same piece of code but commented heavily with the proof of its
own correctness.</p>

<figure class='code'><figcaption><span>Binary Search Lower Bound Proof - search.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/** Return the lower-bound position of @a x in @a a</span>
</span><span class='line'><span class="cm"> * @param compare(p,q) returns true if p &lt; q</span>
</span><span class='line'><span class="cm"> * @pre @a a has length equal to @a n</span>
</span><span class='line'><span class="cm"> * @pre @a a is sorted by @a compare</span>
</span><span class='line'><span class="cm"> * @post return R where 0 &lt;= R &lt;= @a n and:</span>
</span><span class='line'><span class="cm"> *   For all 0 &lt;= i &lt; n, </span>
</span><span class='line'><span class="cm"> *      i &lt; R iff a[i] &lt; x</span>
</span><span class='line'><span class="cm"> *      i &gt;= R iff a[i] &gt;= x </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">CMP</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">lower_bound_proof</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">CMP</span> <span class="n">compare</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// pre: for all i,j with 0 &lt;= i &lt;= j &lt; n, we have a[i] &lt;= a[j]</span>
</span><span class='line'>  <span class="c1">// post: let R be the return value. Then 0 &lt;= R &lt;= n, and</span>
</span><span class='line'>  <span class="c1">//   for all 0 &lt;= i &lt; n,</span>
</span><span class='line'>  <span class="c1">//     i &lt; R iff a[i] &lt; x    (1)</span>
</span><span class='line'>  <span class="c1">//     i &gt;= R iff a[i] &gt;= x  (2) </span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// PRE LOOP</span>
</span><span class='line'>    <span class="c1">// loop invariant: l &lt;= R &lt;= r (always true in the loop)</span>
</span><span class='line'>    <span class="c1">// decrementing function: d = r - l</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// if r - l &gt;= 2, then (r - l)/2 &gt;= 1,</span>
</span><span class='line'>                             <span class="c1">//                so l &lt; m &lt; r</span>
</span><span class='line'>                             <span class="c1">// if r - l == 1, then l = m &lt; r, </span>
</span><span class='line'>                             <span class="c1">//                so l &lt;= m &lt; r</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="p">],</span><span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// we have a[m] &lt; x. Then by (1), a[m] &lt; x ==&gt; m &lt; R</span>
</span><span class='line'>      <span class="c1">// then for all 0 &lt;= i &lt;= m, a[i] &lt; x (b/c sorted)</span>
</span><span class='line'>      <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// so l &lt; l_new == m + 1 &lt;= R</span>
</span><span class='line'>                 <span class="c1">// r_new == r &gt;= R</span>
</span><span class='line'>                 <span class="c1">// so l_new &lt;= R &lt;= r_new</span>
</span><span class='line'>                 <span class="c1">// and r_new - l_new &lt; r - l (d decrements)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// we have a[m] &gt;= x. Then by (2), a[m] &gt;= x ==&gt; m &gt;= R</span>
</span><span class='line'>      <span class="c1">// then for all m &lt;= i &lt; n, a[i] &gt;= x (b/c sorted)</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span> <span class="c1">// so r &gt; r_new == m &gt;= R</span>
</span><span class='line'>             <span class="c1">// l_new == l &lt;= R</span>
</span><span class='line'>             <span class="c1">// so l_new &lt;= R &lt;= r_new</span>
</span><span class='line'>             <span class="c1">// and r_new - l_new &lt; r - l (d decrements)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// POST LOOP</span>
</span><span class='line'>    <span class="c1">// loop invariant: l_new &lt;= R &lt;= r_new</span>
</span><span class='line'>    <span class="c1">// decrementing function: r_new - l_new &lt; r - l</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// by the decrementing function, d eventually reaches 0;</span>
</span><span class='line'>  <span class="c1">//      thus the loop terminates</span>
</span><span class='line'>  <span class="c1">// by the loop invariant, we have l &lt;= R &lt;= r</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To prove the correctness, we make heavy use of the post condition:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @post return R where 0 &lt;= R &lt;= @a n and:</span>
</span><span class='line'><span class="cm"> *   For all 0 &lt;= i &lt; n, </span>
</span><span class='line'><span class="cm"> *      i &lt; R iff a[i] &lt; x</span>
</span><span class='line'><span class="cm"> *      i &gt;= R iff a[i] &gt;= x </span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, all elements at indices less than the return value <code>R</code> are less
than <code>x</code>, and all other elements are greater than or equal to <code>x</code>. We use this
both of these if and only if conditions in the two branches of the <code>if</code>
conditional to guide us on how we should update <code>l</code> or <code>r</code>.</p>

<p>In both of the branches of the conditional, we have that the new values of
<code>l</code> and <code>r</code> are maintained so that <code>l &lt;= R &lt;= r</code> and still satisfy the
post condition of the function. Thus, the statement <code>l &lt;= R &lt;= r</code> is a
<strong>loop invariant</strong> of the <code>while</code> loop: it is always true on entering and
leaving the loop. To ensure that the loop terminates, we require a
<strong>decrementing function</strong>, a function that decreases on each iteration of
the loop and is equal to zero when the loop terminates. In this case, the
obvious choice for the decrementing function would be <code>d = r - l</code>. We show
in both branches that the new values of <code>l</code> and <code>r</code> are such that
<code>r_new - l_new &lt; r - l</code>, and so <code>d</code> decreases on each iteration. When
<code>d = 0</code>, we have that <code>l = r</code>, which is indeed when the loop terminates. Thus,
our final line <code>return l;</code> is proven correct by the combination of our
post conditions, pre conditions (array is sorted), loop invariant, and
decrementing function. By analyzing the invariants in the code, the code almost
writes itself! Cool!</p>

<p>To view the code in its entirety (along with a couple of simple test harnesses
for each version of binary search), check out the source
<a href="http://kennyyu.me/downloads/code/search.cpp">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Layout, LaTeX, and Tag Clouds!]]></title>
    <link href="http://kennyyu.me/blog/2012/05/17/new-layout/"/>
    <updated>2012-05-17T00:03:00-04:00</updated>
    <id>http://kennyyu.me/blog/2012/05/17/new-layout</id>
    <content type="html"><![CDATA[<p>I got a new octopress layout using Melandri&#8217;s layout
<a href="http://melandri.net/2012/02/14/octopress-theme-customization/">here</a>.
I also discovered how to make cool striped backgrounds with
<a href="http://www.stripegenerator.com/">StripeGenerator</a>, use cool new fonts
from <a href="http://www.theleagueofmoveabletype.com/">The League of Movable Type</a>,
and use cool pre-made icons with
<a href="http://www.doublejdesign.co.uk/">Double-J Design</a>. Hopefully the layout
will encourage me to actually keep up with my tech blog!</p>

<p>I also installed $\LaTeX$ integration with Octopress using the handy hints from
<a href="http://luikore.github.com/2011/09/good-things-learned-from-octopress/">here</a>.
Now I can write pretty in-line equations like $e^{i\pi} + 1 = 0$ or
centered equations like
$$\int_{\Omega} \, d\omega = \int_{\partial \Omega} \, \omega.$$
Nice! Hopefully this will motivate me to write more math-related entries!</p>

<p>To keep track of tags, I installed a plugin to generate tag clouds
(see the right sidebar) using this plugin
<a href="https://github.com/tokkonopapa/octopress-tagcloud">here</a>. I also
finally discovered how to make background images that are just noises using
this background generator <a href="http://bgpatterns.com/">here</a>. I like the simplicity
of these backgrounds!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphLint: Creating a Domain Specific Language for Graph Validation]]></title>
    <link href="http://kennyyu.me/blog/2012/05/16/graphlint/"/>
    <updated>2012-05-16T00:23:00-04:00</updated>
    <id>http://kennyyu.me/blog/2012/05/16/graphlint</id>
    <content type="html"><![CDATA[<p>This is a bit late, but I had written a blog post for the project I worked on during my winter internship at Knewton. My article was published on their tech blog <a href="http://www.knewton.com/tech/blog/2012/02/graphlint-creating-a-domain-specific-language-for-graph-validation/" title="GraphLint">here</a>. I created a domain specific language to verify certain predicates on directed property graphs (e.g. all nodes of type A are connected to exactly 2 nodes of type B via edges of type E). This was a great exercise in the material I learned from the compilers course I took in the fall. Designing the language, the validation engine, and engineering the whole project was an awesome experience!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post!]]></title>
    <link href="http://kennyyu.me/blog/2012/01/14/first-post/"/>
    <updated>2012-01-14T13:06:00-05:00</updated>
    <id>http://kennyyu.me/blog/2012/01/14/first-post</id>
    <content type="html"><![CDATA[<p>This will be my tech blog where I post my thoughts (and hopefully some code) about computer science, math, and whatever the likes. I&#8217;m using <a href="http://octopress.org/" title="Octopress">Octopress</a> for blog generation, and I&#8217;m hosting it on my Github page. Nice and simple. Yessss.</p>
]]></content>
  </entry>
  
</feed>
