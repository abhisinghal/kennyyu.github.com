<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | kennary island]]></title>
  <link href="http://kennyyu.me/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://kennyyu.me/"/>
  <updated>2014-03-19T21:04:38-04:00</updated>
  <id>http://kennyyu.me/</id>
  <author>
    <name><![CDATA[Kenny Yu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Omnibox GDrive Search]]></title>
    <link href="http://kennyyu.me/blog/2013/10/20/omnibox-gdrive-search/"/>
    <updated>2013-10-20T22:11:00-04:00</updated>
    <id>http://kennyyu.me/blog/2013/10/20/omnibox-gdrive-search</id>
    <content type="html"><![CDATA[<p><img src="/images/omnibox-gdrive-search.png" alt="Omnibox GDrive Search" /></p>

<p>I published my first Chrome Extension: <a href="https://chrome.google.com/webstore/detail/omnibox-gdrive-search/faadbnlolclhboooficaklnhnkdjmdnb">Omnibox GDrive Search</a>!
The extension allows you to search your google drive for documents and then jump directly to them from the omnibox! See the <a href="https://github.com/kennyyu/omnibox-gdrive-search">code on github</a>.</p>

<p>In the omnibox, type <code>gd</code> and press <code>TAB</code>. Now you can enter your queries and jump directly to the file from the omnibox suggestions!</p>

<p>To use it, you must first authorize Google Drive metadata read-only access to the extension by following these instructions (see screenshots in extension link):</p>

<ol>
<li>Go to <code>chrome://extensions</code></li>
<li>Find this extension, and click "Options"</li>
<li>Click "Authorize", and then click "Accept" to grant the extension access. This will redirect to a blank page. Close it, and refresh the options page.</li>
<li>If you see "You have already authorized this extension!", then you can now search!</li>
</ol>


<p>By far, the most difficult part of the extension was understanding authorization with Google Drive. The extension is a bit
buggy and lags a little because the extension must renew the authorization with Google Drive every 15 minutes or so.
To get around this, the extension only requests authorization on the first use after the expiration and will
redirect the user to the options page.
Thus, if you're using the extension for the first time in a while, it may take ~3 seconds before search results come back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pipeline for Improving Hand Tracking Accuracy]]></title>
    <link href="http://kennyyu.me/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy/"/>
    <updated>2012-12-10T21:48:00-05:00</updated>
    <id>http://kennyyu.me/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/DFPg-9D46kE "></iframe></div></p>

<p>For my CS283: Computer Vision Final Project, I created an application to control Google Maps
using your hand and a webcam.</p>

<p>It uses the Chrome API to access the webcam, and frames are sent to a Tornado server that
runs the hand tracking pipeline, annotates the frame, and sends back the displacement
vector to update the view of the map. I am using OpenCV for it's Haar Cascade libraries.</p>

<p>You can <a href="https://github.com/kennyyu/cs283-project">view the code on github</a>
and setup an instance of the server locally!</p>

<p>You can also <a href="https://www.dropbox.com/s/tnyzr1qt8fmnscp/hand-tracking-pipeline.pdf">view the paper</a>
I wrote to describe the process I used in the pipeline. Below is a summary of the problem
statement and the stages in the pipeline.</p>

<h1>Problem Statement</h1>

<p>Given a poorly trained Haar Cascade Classifier (250 positive samples and 100 negative samples) to recognize hands,
this project assembles a pipeline to improve the quality of the tracking. These steps include:</p>

<ol>
<li>Face detection and removal of faces.</li>
<li>Background subtraction.</li>
<li>Use a simplified Kalman-Filter-esque technique to estimate the bounding box of the hand. This assumes that a hand moves in a smooth manner.</li>
<li>Use our hand classifier to detect the largest hand within the bounding box.</li>
<li>Compute the optical flow of points within the bounding box using Lucas-Kanade.</li>
<li>Use the optical flow and the measured position of the hand to correct our Kalman-Filter estimate.</li>
</ol>

]]></content>
  </entry>
  
</feed>
