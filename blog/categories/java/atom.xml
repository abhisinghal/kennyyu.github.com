<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | kennary island]]></title>
  <link href="http://kennyyu.me/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://kennyyu.me/"/>
  <updated>2013-11-20T15:32:21-05:00</updated>
  <id>http://kennyyu.me/</id>
  <author>
    <name><![CDATA[Kenny Yu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Flag Command Line Library]]></title>
    <link href="http://kennyyu.me/blog/2012/08/22/java-flag-command-line-library/"/>
    <updated>2012-08-22T18:07:00-04:00</updated>
    <id>http://kennyyu.me/blog/2012/08/22/java-flag-command-line-library</id>
    <content type="html"><![CDATA[<p>Inspired by other commmand line libraries, I decided to make my own Java flag
command line library <a href="https://github.com/kennyyu/flags">here</a>. It makes use
of Java's Reflection capabilities to fill in the values of flags at runtime.
The library is fairly simple to use--it requires only declaring a static
field, and one invocation to <code>Flags.parse</code> in the <code>main</code> method of the
application. The library offers support for various wrapper types as well
as collection types.</p>

<p>In addition to learning how to use Java's Reflection capabilities, this
was also an exercise in learning how to use Maven to build and deploy my
project. I am using a <a href="https://github.com/kennyyu/maven-repos">github project</a>
as a maven server.</p>

<p>See the <code>README.md</code> in the github directory for more information on how to
use it and install the library.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphLint: Creating a Domain Specific Language for Graph Validation]]></title>
    <link href="http://kennyyu.me/blog/2012/05/16/graphlint/"/>
    <updated>2012-05-16T00:23:00-04:00</updated>
    <id>http://kennyyu.me/blog/2012/05/16/graphlint</id>
    <content type="html"><![CDATA[<p>This is a bit late, but I had written a blog post for the project I worked on during my winter internship at Knewton. My article was published on their tech blog <a href="http://www.knewton.com/tech/blog/2012/02/graphlint-creating-a-domain-specific-language-for-graph-validation/" title="GraphLint">here</a>. I created a domain specific language to verify certain predicates on directed property graphs (e.g. all nodes of type A are connected to exactly 2 nodes of type B via edges of type E). This was a great exercise in the material I learned from the compilers course I took in the fall. Designing the language, the validation engine, and engineering the whole project was an awesome experience!</p>
]]></content>
  </entry>
  
</feed>
